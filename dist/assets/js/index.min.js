/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */
function log(t){window.console&&showLog&&console.log(t)}function css_browser_selector(t){function e(){var t=window.outerWidth||b.clientWidth,e=window.outerHeight||b.clientHeight;i.orientation=t<e?"portrait":"landscape",b.className=b.className.replace(/ ?orientation_\w+/g,"").replace(/ [min|max|cl]+[w|h]_\d+/g,"");for(var n=o-1;n>=0;n--)if(t>=r[n]){i.maxw=r[n];break}widthClasses="";for(var s in i)widthClasses+=" "+s+"_"+i[s];return b.className=b.className+widthClasses,widthClasses}function n(){var t=window.devicePixelRatio>1;t?b.className+=" retina":b.className+=" non-retina"}var i={},r=[320,480,640,768,1024,1152,1280,1440,1680,1920,2560],o=r.length,s=t.toLowerCase(),a=function(t){return RegExp(t,"i").test(s)},l=function(t,e){e=e.replace(".","_");for(var n=e.indexOf("_"),i="";n>0;)i+=" "+t+e.substring(0,n),n=e.indexOf("_",n+1);return i+=" "+t+e},c="gecko",u="webkit",h="chrome",p="firefox",d="safari",f="opera",g="mobile",m="android",v="blackberry",y="lang_",w="device_",b=document.documentElement,x=[!/opera|webtv/i.test(s)&&/msie\s(\d+)/.test(s)||/trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.test(s)?"ie ie"+(/trident\/4\.0/.test(s)?"8":"11.0"==RegExp.$1?"11":RegExp.$1):a("firefox/")?c+" "+p+(/firefox\/((\d+)(\.(\d+))(\.\d+)*)/.test(s)?" "+p+RegExp.$2+" "+p+RegExp.$2+"_"+RegExp.$4:""):a("gecko/")?c:a("opera")?f+(/version\/((\d+)(\.(\d+))(\.\d+)*)/.test(s)?" "+f+RegExp.$2+" "+f+RegExp.$2+"_"+RegExp.$4:/opera(\s|\/)(\d+)\.(\d+)/.test(s)?" "+f+RegExp.$2+" "+f+RegExp.$2+"_"+RegExp.$3:""):a("konqueror")?"konqueror":a("blackberry")?v+(/Version\/(\d+)(\.(\d+)+)/i.test(s)?" "+v+RegExp.$1+" "+v+RegExp.$1+RegExp.$2.replace(".","_"):/Blackberry ?(([0-9]+)([a-z]?))[\/|;]/gi.test(s)?" "+v+RegExp.$2+(RegExp.$3?" "+v+RegExp.$2+RegExp.$3:""):""):a("android")?m+(/Version\/(\d+)(\.(\d+))+/i.test(s)?" "+m+RegExp.$1+" "+m+RegExp.$1+RegExp.$2.replace(".","_"):"")+(/Android (.+); (.+) Build/i.test(s)?" "+w+RegExp.$2.replace(/ /g,"_").replace(/-/g,"_"):""):a("chrome")?u+" "+h+(/chrome\/((\d+)(\.(\d+))(\.\d+)*)/.test(s)?" "+h+RegExp.$2+(RegExp.$4>0?" "+h+RegExp.$2+"_"+RegExp.$4:""):""):a("iron")?u+" iron":a("applewebkit/")?u+" "+d+(/version\/((\d+)(\.(\d+))(\.\d+)*)/.test(s)?" "+d+RegExp.$2+" "+d+RegExp.$2+RegExp.$3.replace(".","_"):/ Safari\/(\d+)/i.test(s)?"419"==RegExp.$1||"417"==RegExp.$1||"416"==RegExp.$1||"412"==RegExp.$1?" "+d+"2_0":"312"==RegExp.$1?" "+d+"1_3":"125"==RegExp.$1?" "+d+"1_2":"85"==RegExp.$1?" "+d+"1_0":"":""):a("mozilla/")?c:"",a("android|mobi|mobile|j2me|iphone|ipod|ipad|blackberry|playbook|kindle|silk")?g:"",a("j2me")?"j2me":a("ipad|ipod|iphone")?(/CPU( iPhone)? OS (\d+[_|\.]\d+([_|\.]\d+)*)/i.test(s)?"ios"+l("ios",RegExp.$2):"")+" "+(/(ip(ad|od|hone))/gi.test(s)?RegExp.$1:""):a("playbook")?"playbook":a("kindle|silk")?"kindle":a("playbook")?"playbook":a("mac")?"mac"+(/mac os x ((\d+)[.|_](\d+))/.test(s)?" mac"+RegExp.$2+" mac"+RegExp.$1.replace(".","_"):""):a("win")?"win"+(a("windows nt 6.2")?" win8":a("windows nt 6.1")?" win7":a("windows nt 6.0")?" vista":a("windows nt 5.2")||a("windows nt 5.1")?" win_xp":a("windows nt 5.0")?" win_2k":a("windows nt 4.0")||a("WinNT4.0")?" win_nt":""):a("freebsd")?"freebsd":a("x11|linux")?"linux":"",/[; |\[](([a-z]{2})(\-[a-z]{2})?)[)|;|\]]/i.test(s)?(y+RegExp.$2).replace("-","_")+(""!=RegExp.$3?(" "+y+RegExp.$1).replace("-","_"):""):"",a("ipad|iphone|ipod")&&!a("safari")?"ipad_app":""];console.debug(s),window.onresize=e,e(),n();var _=x.join(" ")+" js ";return b.className=(_+b.className.replace(/\b(no[-|_]?)?js\b/g,"")).replace(/^ /,"").replace(/ +/g," "),_}!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=J.type(t);return"function"!==n&&!J.isWindow(t)&&(!(1!==t.nodeType||!e)||("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t))}function i(t,e,n){if(J.isFunction(e))return J.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return J.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(at.test(e))return J.filter(e,t,n);e=J.filter(e,t)}return J.grep(t,function(t){return B.call(e,t)>=0!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e=ft[t]={};return J.each(t.match(dt)||[],function(t,n){e[n]=!0}),e}function s(){K.removeEventListener("DOMContentLoaded",s,!1),t.removeEventListener("load",s,!1),J.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=J.expando+a.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(bt,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:wt.test(n)?J.parseJSON(n):n)}catch(r){}yt.set(t,e,n)}else n=void 0;return n}function c(){return!0}function u(){return!1}function h(){try{return K.activeElement}catch(t){}}function p(t,e){return J.nodeName(t,"table")&&J.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function d(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function f(t){var e=Mt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var n=0,i=t.length;n<i;n++)vt.set(t[n],"globalEval",!e||vt.get(e[n],"globalEval"))}function m(t,e){var n,i,r,o,s,a,l,c;if(1===e.nodeType){if(vt.hasData(t)&&(o=vt.access(t),s=vt.set(e,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)J.event.add(e,r,c[r][n])}yt.hasData(t)&&(a=yt.access(t),l=J.extend({},a),yt.set(e,l))}}function v(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&J.nodeName(t,e)?J.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ct.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function w(e,n){var i,r=J(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:J.css(r[0],"display");return r.detach(),o}function b(t){var e=K,n=Ht[t];return n||(n=w(t,e),"none"!==n&&n||(Wt=(Wt||J("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Wt[0].contentDocument,e.write(),e.close(),n=w(t,e),Wt.detach()),Ht[t]=n),n}function x(t,e,n){var i,r,o,s,a=t.style;return n=n||zt(t),n&&(s=n.getPropertyValue(e)||n[e]),n&&(""!==s||J.contains(t.ownerDocument,t)||(s=J.style(t,e)),Xt.test(s)&&qt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function _(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function T(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,r=Vt.length;r--;)if(e=Vt[r]+n,e in t)return e;return i}function C(t,e,n){var i=Ft.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function E(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=J.css(t,n+_t[o],!0,r)),i?("content"===n&&(s-=J.css(t,"padding"+_t[o],!0,r)),"margin"!==n&&(s-=J.css(t,"border"+_t[o]+"Width",!0,r))):(s+=J.css(t,"padding"+_t[o],!0,r),"padding"!==n&&(s+=J.css(t,"border"+_t[o]+"Width",!0,r)));return s}function S(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=zt(t),s="border-box"===J.css(t,"boxSizing",!1,o);if(r<=0||null==r){if(r=x(t,e,o),(r<0||null==r)&&(r=t.style[e]),Xt.test(r))return r;i=s&&(G.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+E(t,e,n||(s?"border":"content"),i,o)+"px"}function k(t,e){for(var n,i,r,o=[],s=0,a=t.length;s<a;s++)i=t[s],i.style&&(o[s]=vt.get(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Tt(i)&&(o[s]=vt.access(i,"olddisplay",b(i.nodeName)))):(r=Tt(i),"none"===n&&r||vt.set(i,"olddisplay",r?n:J.css(i,"display"))));for(s=0;s<a;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function D(t,e,n,i,r){return new D.prototype.init(t,e,n,i,r)}function R(){return setTimeout(function(){Gt=void 0}),Gt=J.now()}function A(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)n=_t[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function $(t,e,n){for(var i,r=(ne[e]||[]).concat(ne["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function j(t,e,n){var i,r,o,s,a,l,c,u,h=this,p={},d=t.style,f=t.nodeType&&Tt(t),g=vt.get(t,"fxshow");n.queue||(a=J._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,J.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],c=J.css(t,"display"),u="none"===c?vt.get(t,"olddisplay")||b(t.nodeName):c,"inline"===u&&"none"===J.css(t,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],Zt.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(f?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;f=!0}p[i]=g&&g[i]||J.style(t,i)}else c=void 0;if(J.isEmptyObject(p))"inline"===("none"===c?b(t.nodeName):c)&&(d.display=c);else{g?"hidden"in g&&(f=g.hidden):g=vt.access(t,"fxshow",{}),o&&(g.hidden=!f),f?J(t).show():h.done(function(){J(t).hide()}),h.done(function(){var e;vt.remove(t,"fxshow");for(e in p)J.style(t,e,p[e])});for(i in p)s=$(f?g[i]:0,i,h),i in g||(g[i]=s.start,f&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function P(t,e){var n,i,r,o,s;for(n in t)if(i=J.camelCase(n),r=e[i],o=t[n],J.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),s=J.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function N(t,e,n){var i,r,o=0,s=ee.length,a=J.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=Gt||R(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,o=1-i,s=0,l=c.tweens.length;s<l;s++)c.tweens[s].run(o);return a.notifyWith(t,[c,o,n]),o<1&&l?n:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:J.extend({},e),opts:J.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Gt||R(),duration:n.duration,tweens:[],createTween:function(e,n){var i=J.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?a.resolveWith(t,[c,e]):a.rejectWith(t,[c,e]),this}}),u=c.props;for(P(u,c.opts.specialEasing);o<s;o++)if(i=ee[o].call(c,t,u,c.opts))return i;return J.map(u,$,c),J.isFunction(c.opts.start)&&c.opts.start.call(t,c),J.fx.timer(J.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function L(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(dt)||[];if(J.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function M(t,e,n,i){function r(a){var l;return o[a]=!0,J.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=t===we;return r(e.dataTypes[0])||!o["*"]&&r("*")}function I(t,e){var n,i,r=J.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&J.extend(!0,t,i),t}function O(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}function W(t,e,n,i){var r,o,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=c[l+" "+o]||c["* "+o],!s)for(r in c)if(a=r.split(" "),a[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){s===!0?s=c[r]:c[r]!==!0&&(o=a[0],u.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(h){return{state:"parsererror",error:s?h:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function H(t,e,n,i){var r;if(J.isArray(e))J.each(e,function(e,r){n||Ce.test(t)?i(t,r):H(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==J.type(e))i(t,e);else for(r in e)H(t+"["+r+"]",e[r],n,i)}function q(t){return J.isWindow(t)?t:9===t.nodeType&&t.defaultView}var X=[],z=X.slice,Y=X.concat,F=X.push,B=X.indexOf,U={},Q=U.toString,V=U.hasOwnProperty,G={},K=t.document,Z="2.1.4",J=function(t,e){return new J.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,it=function(t,e){return e.toUpperCase()};J.fn=J.prototype={jquery:Z,constructor:J,selector:"",length:0,toArray:function(){return z.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:z.call(this)},pushStack:function(t){var e=J.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return J.each(this,t,e)},map:function(t){return this.pushStack(J.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(z.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:F,sort:X.sort,splice:X.splice},J.extend=J.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||J.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(c&&i&&(J.isPlainObject(i)||(r=J.isArray(i)))?(r?(r=!1,o=n&&J.isArray(n)?n:[]):o=n&&J.isPlainObject(n)?n:{},s[e]=J.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},J.extend({expando:"jQuery"+(Z+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===J.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!J.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"===J.type(t)&&!t.nodeType&&!J.isWindow(t)&&!(t.constructor&&!V.call(t.constructor.prototype,"isPrototypeOf"))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?U[Q.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=J.trim(t),t&&(1===t.indexOf("use strict")?(e=K.createElement("script"),e.text=t,K.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,it)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,s=t.length,a=n(t);if(i){if(a)for(;o<s&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(a)for(;o<s&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?J.merge(i,"string"==typeof t?[t]:t):F.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:B.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,s=t.length,a=!n;o<s;o++)i=!e(t[o],o),i!==a&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,s=t.length,a=n(t),l=[];if(a)for(;o<s;o++)r=e(t[o],o,i),null!=r&&l.push(r);else for(o in t)r=e(t[o],o,i),null!=r&&l.push(r);return Y.apply([],l)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),J.isFunction(t))return i=z.call(arguments,2),r=function(){return t.apply(e||this,i.concat(z.call(arguments)))},r.guid=t.guid=t.guid||J.guid++,r},now:Date.now,support:G}),J.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){U["[object "+e+"]"]=e.toLowerCase()});var rt=/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
function(t){function e(t,e,n,i){var r,o,s,a,l,c,h,d,f,g;if((e?e.ownerDocument||e:H)!==j&&$(e),e=e||j,n=n||[],a=e.nodeType,"string"!=typeof t||!t||1!==a&&9!==a&&11!==a)return n;if(!i&&N){if(11!==a&&(r=yt.exec(t)))if(s=r[1]){if(9===a){if(o=e.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(s))&&O(e,o)&&o.id===s)return n.push(o),n}else{if(r[2])return Z.apply(n,e.getElementsByTagName(t)),n;if((s=r[3])&&x.getElementsByClassName)return Z.apply(n,e.getElementsByClassName(s)),n}if(x.qsa&&(!L||!L.test(t))){if(d=h=W,f=e,g=1!==a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(c=E(t),(h=e.getAttribute("id"))?d=h.replace(bt,"\\$&"):e.setAttribute("id",d),d="[id='"+d+"'] ",l=c.length;l--;)c[l]=d+p(c[l]);f=wt.test(t)&&u(e.parentNode)||e,g=c.join(",")}if(g)try{return Z.apply(n,f.querySelectorAll(g)),n}catch(m){}finally{h||e.removeAttribute("id")}}}return k(t.replace(lt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[W]=!0,t}function r(t){var e=j.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=t.length;i--;)_.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||U)-(~t.sourceIndex||U);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function u(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function d(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=X++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,l,c=[q,o];if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(l=e[W]||(e[W]={}),(a=l[i])&&a[0]===q&&a[1]===o)return c[2]=a[2];if(l[i]=c,c[2]=t(e,n,s))return!0}}}function f(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function g(t,n,i){for(var r=0,o=n.length;r<o;r++)e(t,n[r],i);return i}function m(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(a)));return s}function v(t,e,n,r,o,s){return r&&!r[W]&&(r=v(r)),o&&!o[W]&&(o=v(o,s)),i(function(i,s,a,l){var c,u,h,p=[],d=[],f=s.length,v=i||g(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:m(v,p,t,a,l),w=n?o||(i?t:f||r)?[]:s:y;if(n&&n(y,w,a,l),r)for(c=m(w,d),r(c,[],a,l),u=c.length;u--;)(h=c[u])&&(w[d[u]]=!(y[d[u]]=h));if(i){if(o||t){if(o){for(c=[],u=w.length;u--;)(h=w[u])&&c.push(y[u]=h);o(null,w=[],c,l)}for(u=w.length;u--;)(h=w[u])&&(c=o?tt(i,h):p[u])>-1&&(i[c]=!(s[c]=h))}}else w=m(w===s?w.splice(f,w.length):w),o?o(null,s,w,l):Z.apply(s,w)})}function y(t){for(var e,n,i,r=t.length,o=_.relative[t[0].type],s=o||_.relative[" "],a=o?1:0,l=d(function(t){return t===e},s,!0),c=d(function(t){return tt(e,t)>-1},s,!0),u=[function(t,n,i){var r=!o&&(i||n!==D)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,r}];a<r;a++)if(n=_.relative[t[a].type])u=[d(f(u),n)];else{if(n=_.filter[t[a].type].apply(null,t[a].matches),n[W]){for(i=++a;i<r&&!_.relative[t[i].type];i++);return v(a>1&&f(u),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(lt,"$1"),n,a<i&&y(t.slice(a,i)),i<r&&y(t=t.slice(i)),i<r&&p(t))}u.push(n)}return f(u)}function w(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,c){var u,h,p,d=0,f="0",g=i&&[],v=[],y=D,w=i||o&&_.find.TAG("*",c),b=q+=null==y?1:Math.random()||.1,x=w.length;for(c&&(D=s!==j&&s);f!==x&&null!=(u=w[f]);f++){if(o&&u){for(h=0;p=t[h++];)if(p(u,s,a)){l.push(u);break}c&&(q=b)}r&&((u=!p&&u)&&d--,i&&g.push(u))}if(d+=f,r&&f!==d){for(h=0;p=n[h++];)p(g,v,s,a);if(i){if(d>0)for(;f--;)g[f]||v[f]||(v[f]=G.call(l));v=m(v)}Z.apply(l,v),c&&!i&&v.length>0&&d+n.length>1&&e.uniqueSort(l)}return c&&(q=b,D=y),g};return r?i(s):s}var b,x,_,T,C,E,S,k,D,R,A,$,j,P,N,L,M,I,O,W="sizzle"+1*new Date,H=t.document,q=0,X=0,z=n(),Y=n(),F=n(),B=function(t,e){return t===e&&(A=!0),0},U=1<<31,Q={}.hasOwnProperty,V=[],G=V.pop,K=V.push,Z=V.push,J=V.slice,tt=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt=it.replace("w","w#"),ot="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",st=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ht=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),pt=new RegExp(st),dt=new RegExp("^"+rt+"$"),ft={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/[+~]/,bt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),_t=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Tt=function(){$()};try{Z.apply(V=J.call(H.childNodes),H.childNodes),V[H.childNodes.length].nodeType}catch(Ct){Z={apply:V.length?function(t,e){K.apply(t,J.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}x=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},$=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:H;return i!==j&&9===i.nodeType&&i.documentElement?(j=i,P=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Tt,!1):n.attachEvent&&n.attachEvent("onunload",Tt)),N=!C(i),x.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=r(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=vt.test(i.getElementsByClassName),x.getById=r(function(t){return P.appendChild(t).id=W,!i.getElementsByName||!i.getElementsByName(W).length}),x.getById?(_.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&N){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},_.filter.ID=function(t){var e=t.replace(xt,_t);return function(t){return t.getAttribute("id")===e}}):(delete _.find.ID,_.filter.ID=function(t){var e=t.replace(xt,_t);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),_.find.TAG=x.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):x.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},_.find.CLASS=x.getElementsByClassName&&function(t,e){if(N)return e.getElementsByClassName(t)},M=[],L=[],(x.qsa=vt.test(i.querySelectorAll))&&(r(function(t){P.appendChild(t).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+W+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+W+"+*").length||L.push(".#.+[+~]")}),r(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(x.matchesSelector=vt.test(I=P.matches||P.webkitMatchesSelector||P.mozMatchesSelector||P.oMatchesSelector||P.msMatchesSelector))&&r(function(t){x.disconnectedMatch=I.call(t,"div"),I.call(t,"[s!='']:x"),M.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),M=M.length&&new RegExp(M.join("|")),e=vt.test(P.compareDocumentPosition),O=e||vt.test(P.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},B=e?function(t,e){if(t===e)return A=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!x.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===H&&O(H,t)?-1:e===i||e.ownerDocument===H&&O(H,e)?1:R?tt(R,t)-tt(R,e):0:4&n?-1:1)}:function(t,e){if(t===e)return A=!0,0;var n,r=0,o=t.parentNode,a=e.parentNode,l=[t],c=[e];if(!o||!a)return t===i?-1:e===i?1:o?-1:a?1:R?tt(R,t)-tt(R,e):0;if(o===a)return s(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)c.unshift(n);for(;l[r]===c[r];)r++;return r?s(l[r],c[r]):l[r]===H?-1:c[r]===H?1:0},i):j},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==j&&$(t),n=n.replace(ht,"='$1']"),x.matchesSelector&&N&&(!M||!M.test(n))&&(!L||!L.test(n)))try{var i=I.call(t,n);if(i||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,j,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==j&&$(t),O(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==j&&$(t);var n=_.attrHandle[e.toLowerCase()],i=n&&Q.call(_.attrHandle,e.toLowerCase())?n(t,e,!N):void 0;return void 0!==i?i:x.attributes||!N?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(A=!x.detectDuplicates,R=!x.sortStable&&t.slice(0),t.sort(B),A){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return R=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},_=e.selectors={cacheLength:50,createPseudo:i,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,_t),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,_t),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&pt.test(n)&&(e=E(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,_t).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=z[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&z(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(at," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,p,d,f,g=o!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(m){if(o){for(;g;){for(h=e;h=h[g];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(u=m[W]||(m[W]={}),c=u[t]||[],d=c[0]===q&&c[1],p=c[0]===q&&c[2],h=d&&m.childNodes[d];h=++d&&h&&h[g]||(p=d=0)||f.pop();)if(1===h.nodeType&&++p&&h===e){u[t]=[q,d,p];break}}else if(y&&(c=(e[W]||(e[W]={}))[t])&&c[0]===q)p=c[1];else for(;(h=++d&&h&&h[g]||(p=d=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++p||(y&&((h[W]||(h[W]={}))[t]=[q,p]),h!==e)););return p-=r,p===i||p%i===0&&p/i>=0}}},PSEUDO:function(t,n){var r,o=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[W]?o(n):o.length>1?(r=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=tt(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=S(t.replace(lt,"$1"));return r[W]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(xt,_t),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return dt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,_t).toLowerCase(),function(e){var n;do if(n=N?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===P},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},_.pseudos.nth=_.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})_.pseudos[b]=l(b);return h.prototype=_.filters=_.pseudos,_.setFilters=new h,E=e.tokenize=function(t,n){var i,r,o,s,a,l,c,u=Y[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=_.preFilter;a;){i&&!(r=ct.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ut.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(lt," ")}),a=a.slice(i.length));for(s in _.filter)!(r=ft[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):Y(t,l).slice(0)},S=e.compile=function(t,e){var n,i=[],r=[],o=F[t+" "];if(!o){for(e||(e=E(t)),n=e.length;n--;)o=y(e[n]),o[W]?i.push(o):r.push(o);o=F(t,w(r,i)),o.selector=t}return o},k=e.select=function(t,e,n,i){var r,o,s,a,l,c="function"==typeof t&&t,h=!i&&E(t=c.selector||t);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&x.getById&&9===e.nodeType&&N&&_.relative[o[1].type]){if(e=(_.find.ID(s.matches[0].replace(xt,_t),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ft.needsContext.test(t)?0:o.length;r--&&(s=o[r],!_.relative[a=s.type]);)if((l=_.find[a])&&(i=l(s.matches[0].replace(xt,_t),wt.test(o[0].type)&&u(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&p(o),!t)return Z.apply(n,i),n;break}}return(c||S(t,h))(i,e,!N,n,wt.test(t)&&u(e.parentNode)||e),n},x.sortStable=W.split("").sort(B).join("")===W,x.detectDuplicates=!!A,$(),x.sortDetached=r(function(t){return 1&t.compareDocumentPosition(j.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;if(!n)return t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);J.find=rt,J.expr=rt.selectors,J.expr[":"]=J.expr.pseudos,J.unique=rt.uniqueSort,J.text=rt.getText,J.isXMLDoc=rt.isXML,J.contains=rt.contains;var ot=J.expr.match.needsContext,st=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,at=/^.[^:#\[\.,]*$/;J.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?J.find.matchesSelector(i,t)?[i]:[]:J.find.matches(t,J.grep(e,function(t){return 1===t.nodeType}))},J.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(J(t).filter(function(){for(e=0;e<n;e++)if(J.contains(r[e],this))return!0}));for(e=0;e<n;e++)J.find(t,r[e],i);return i=this.pushStack(n>1?J.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ot.test(t)?J(t):t||[],!1).length}});var lt,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ut=J.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ct.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof J?e[0]:e,J.merge(this,J.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:K,!0)),st.test(n[1])&&J.isPlainObject(e))for(n in e)J.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=K.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=K,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):J.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(J):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),J.makeArray(t,this))};ut.prototype=J.fn,lt=J(K);var ht=/^(?:parents|prev(?:Until|All))/,pt={children:!0,contents:!0,next:!0,prev:!0};J.extend({dir:function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&J(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),J.fn.extend({has:function(t){var e=J(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(J.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=ot.test(t)||"string"!=typeof t?J(t,e||this.context):0;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&J.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?J.unique(o):o)},index:function(t){return t?"string"==typeof t?B.call(J(t),this[0]):B.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(J.unique(J.merge(this.get(),J(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),J.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return J.dir(t,"parentNode")},parentsUntil:function(t,e,n){return J.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return J.dir(t,"nextSibling")},prevAll:function(t){return J.dir(t,"previousSibling")},nextUntil:function(t,e,n){return J.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return J.dir(t,"previousSibling",n)},siblings:function(t){return J.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return J.sibling(t.firstChild)},contents:function(t){return t.contentDocument||J.merge([],t.childNodes)}},function(t,e){J.fn[t]=function(n,i){var r=J.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=J.filter(i,r)),this.length>1&&(pt[t]||J.unique(r),ht.test(t)&&r.reverse()),this.pushStack(r)}});var dt=/\S+/g,ft={};J.Callbacks=function(t){t="string"==typeof t?ft[t]||o(t):J.extend({},t);var e,n,i,r,s,a,l=[],c=!t.once&&[],u=function(o){for(e=t.memory&&o,n=!0,a=r||0,r=0,s=l.length,i=!0;l&&a<s;a++)if(l[a].apply(o[0],o[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,l&&(c?c.length&&u(c.shift()):e?l=[]:h.disable())},h={add:function(){if(l){var n=l.length;!function o(e){J.each(e,function(e,n){var i=J.type(n);"function"===i?t.unique&&h.has(n)||l.push(n):n&&n.length&&"string"!==i&&o(n)})}(arguments),i?s=l.length:e&&(r=n,u(e))}return this},remove:function(){return l&&J.each(arguments,function(t,e){for(var n;(n=J.inArray(e,l,n))>-1;)l.splice(n,1),i&&(n<=s&&s--,n<=a&&a--)}),this},has:function(t){return t?J.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=c=e=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,e||h.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!l||n&&!c||(e=e||[],e=[t,e.slice?e.slice():e],i?c.push(e):u(e)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},J.extend({Deferred:function(t){var e=[["resolve","done",J.Callbacks("once memory"),"resolved"],["reject","fail",J.Callbacks("once memory"),"rejected"],["notify","progress",J.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return J.Deferred(function(n){J.each(e,function(e,o){var s=J.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&J.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?J.extend(t,i):i}},r={};return i.pipe=i.then,J.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=z.call(arguments),s=o.length,a=1!==s||t&&J.isFunction(t.promise)?s:0,l=1===a?t:J.Deferred(),c=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?z.call(arguments):r,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);r<s;r++)o[r]&&J.isFunction(o[r].promise)?o[r].promise().done(c(r,i,o)).fail(l.reject).progress(c(r,n,e)):--a;return a||l.resolveWith(i,o),l.promise()}});var gt;J.fn.ready=function(t){return J.ready.promise().done(t),this},J.extend({isReady:!1,readyWait:1,holdReady:function(t){t?J.readyWait++:J.ready(!0)},ready:function(t){(t===!0?--J.readyWait:J.isReady)||(J.isReady=!0,t!==!0&&--J.readyWait>0||(gt.resolveWith(K,[J]),J.fn.triggerHandler&&(J(K).triggerHandler("ready"),J(K).off("ready"))))}}),J.ready.promise=function(e){return gt||(gt=J.Deferred(),"complete"===K.readyState?setTimeout(J.ready):(K.addEventListener("DOMContentLoaded",s,!1),t.addEventListener("load",s,!1))),gt.promise(e)},J.ready.promise();var mt=J.access=function(t,e,n,i,r,o,s){var a=0,l=t.length,c=null==n;if("object"===J.type(n)){r=!0;for(a in n)J.access(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,J.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(J(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):o};J.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},a.uid=1,a.accepts=J.acceptData,a.prototype={key:function(t){if(!a.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=a.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,J.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,r=this.key(t),o=this.cache[r];if("string"==typeof e)o[e]=n;else if(J.isEmptyObject(o))J.extend(this.cache[r],e);else for(i in e)o[i]=e[i];return o},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,J.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,o=this.key(t),s=this.cache[o];if(void 0===e)this.cache[o]={};else{J.isArray(e)?i=e.concat(e.map(J.camelCase)):(r=J.camelCase(e),e in s?i=[e,r]:(i=r,i=i in s?[i]:i.match(dt)||[])),n=i.length;for(;n--;)delete s[i[n]]}},hasData:function(t){return!J.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var vt=new a,yt=new a,wt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,bt=/([A-Z])/g;J.extend({hasData:function(t){return yt.hasData(t)||vt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return vt.access(t,e,n)},_removeData:function(t,e){vt.remove(t,e)}}),J.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=yt.get(o),1===o.nodeType&&!vt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=J.camelCase(i.slice(5)),l(o,i,r[i])));vt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){yt.set(this,t)}):mt(this,function(e){var n,i=J.camelCase(t);if(o&&void 0===e){if(n=yt.get(o,t),void 0!==n)return n;if(n=yt.get(o,i),void 0!==n)return n;if(n=l(o,i,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,i);yt.set(this,i,e),t.indexOf("-")!==-1&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),J.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=vt.get(t,e),n&&(!i||J.isArray(n)?i=vt.access(t,e,J.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=J.queue(t,e),i=n.length,r=n.shift(),o=J._queueHooks(t,e),s=function(){J.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return vt.get(t,n)||vt.access(t,n,{empty:J.Callbacks("once memory").add(function(){vt.remove(t,[e+"queue",n])})})}}),J.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?J.queue(this[0],t):void 0===e?this:this.each(function(){var n=J.queue(this,t,e);J._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&J.dequeue(this,t)})},dequeue:function(t){return this.each(function(){J.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=J.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=vt.get(o[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var xt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,_t=["Top","Right","Bottom","Left"],Tt=function(t,e){return t=e||t,"none"===J.css(t,"display")||!J.contains(t.ownerDocument,t)},Ct=/^(?:checkbox|radio)$/i;!function(){var t=K.createDocumentFragment(),e=t.appendChild(K.createElement("div")),n=K.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),G.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",G.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Et="undefined";G.focusinBubbles="onfocusin"in t;var St=/^key/,kt=/^(?:mouse|pointer|contextmenu)|click/,Dt=/^(?:focusinfocus|focusoutblur)$/,Rt=/^([^.]*)(?:\.(.+)|)$/;J.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,h,p,d,f,g,m=vt.get(t);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),n.guid||(n.guid=J.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return typeof J!==Et&&J.event.triggered!==e.type?J.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(dt)||[""],c=e.length;c--;)a=Rt.exec(e[c])||[],d=g=a[1],f=(a[2]||"").split(".").sort(),d&&(h=J.event.special[d]||{},d=(r?h.delegateType:h.bindType)||d,h=J.event.special[d]||{},u=J.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&J.expr.match.needsContext.test(r),namespace:f.join(".")},o),(p=l[d])||(p=l[d]=[],p.delegateCount=0,h.setup&&h.setup.call(t,i,f,s)!==!1||t.addEventListener&&t.addEventListener(d,s,!1)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),J.event.global[d]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,c,u,h,p,d,f,g,m=vt.hasData(t)&&vt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(dt)||[""],c=e.length;c--;)if(a=Rt.exec(e[c])||[],d=g=a[1],f=(a[2]||"").split(".").sort(),d){for(h=J.event.special[d]||{},d=(i?h.delegateType:h.bindType)||d,p=l[d]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,h.remove&&h.remove.call(t,u));s&&!p.length&&(h.teardown&&h.teardown.call(t,f,m.handle)!==!1||J.removeEvent(t,d,m.handle),delete l[d])}else for(d in l)J.event.remove(t,d+e[c],n,i,!0);J.isEmptyObject(l)&&(delete m.handle,vt.remove(t,"events"))}},trigger:function(e,n,i,r){var o,s,a,l,c,u,h,p=[i||K],d=V.call(e,"type")?e.type:e,f=V.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||K,3!==i.nodeType&&8!==i.nodeType&&!Dt.test(d+J.event.triggered)&&(d.indexOf(".")>=0&&(f=d.split("."),d=f.shift(),f.sort()),c=d.indexOf(":")<0&&"on"+d,e=e[J.expando]?e:new J.Event(d,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=f.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:J.makeArray(n,[e]),
h=J.event.special[d]||{},r||!h.trigger||h.trigger.apply(i,n)!==!1)){if(!r&&!h.noBubble&&!J.isWindow(i)){for(l=h.delegateType||d,Dt.test(l+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(i.ownerDocument||K)&&p.push(a.defaultView||a.parentWindow||t)}for(o=0;(s=p[o++])&&!e.isPropagationStopped();)e.type=o>1?l:h.bindType||d,u=(vt.get(s,"events")||{})[e.type]&&vt.get(s,"handle"),u&&u.apply(s,n),u=c&&s[c],u&&u.apply&&J.acceptData(s)&&(e.result=u.apply(s,n),e.result===!1&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||h._default&&h._default.apply(p.pop(),n)!==!1||!J.acceptData(i)||c&&J.isFunction(i[d])&&!J.isWindow(i)&&(a=i[c],a&&(i[c]=null),J.event.triggered=d,i[d](),J.event.triggered=void 0,a&&(i[c]=a)),e.result}},dispatch:function(t){t=J.event.fix(t);var e,n,i,r,o,s=[],a=z.call(arguments),l=(vt.get(this,"events")||{})[t.type]||[],c=J.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(s=J.event.handlers.call(this,t,l),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!t.isImmediatePropagationStopped();)t.namespace_re&&!t.namespace_re.test(o.namespace)||(t.handleObj=o,t.data=o.data,i=((J.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(i=[],n=0;n<a;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?J(r,this).index(l)>=0:J.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||K,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[J.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=kt.test(r)?this.mouseHooks:St.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new J.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=K),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==h()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===h()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&J.nodeName(this,"input"))return this.click(),!1},_default:function(t){return J.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=J.extend(new J.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?J.event.trigger(r,null,e):J.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},J.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},J.Event=function(t,e){return this instanceof J.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?c:u):this.type=t,e&&J.extend(this,e),this.timeStamp=t&&t.timeStamp||J.now(),void(this[J.expando]=!0)):new J.Event(t,e)},J.Event.prototype={isDefaultPrevented:u,isPropagationStopped:u,isImmediatePropagationStopped:u,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=c,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=c,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=c,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},J.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){J.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||J.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),G.focusinBubbles||J.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){J.event.simulate(e,t.target,J.event.fix(t),!0)};J.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=vt.access(i,e);r||i.addEventListener(t,n,!0),vt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=vt.access(i,e)-1;r?vt.access(i,e,r):(i.removeEventListener(t,n,!0),vt.remove(i,e))}}}),J.fn.extend({on:function(t,e,n,i,r){var o,s;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(s in t)this.on(s,e,n,t[s],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=u;else if(!i)return this;return 1===r&&(o=i,i=function(t){return J().off(t),o.apply(this,arguments)},i.guid=o.guid||(o.guid=J.guid++)),this.each(function(){J.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,J(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=u),this.each(function(){J.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){J.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return J.event.trigger(t,e,n,!0)}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,$t=/<([\w:]+)/,jt=/<|&#?\w+;/,Pt=/<(?:script|style|link)/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,Lt=/^$|\/(?:java|ecma)script/i,Mt=/^true\/(.*)/,It=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ot={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ot.optgroup=Ot.option,Ot.tbody=Ot.tfoot=Ot.colgroup=Ot.caption=Ot.thead,Ot.th=Ot.td,J.extend({clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),l=J.contains(t.ownerDocument,t);if(!(G.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||J.isXMLDoc(t)))for(s=v(a),o=v(t),i=0,r=o.length;i<r;i++)y(o[i],s[i]);if(e)if(n)for(o=o||v(t),s=s||v(a),i=0,r=o.length;i<r;i++)m(o[i],s[i]);else m(t,a);return s=v(a,"script"),s.length>0&&g(s,!l&&v(t,"script")),a},buildFragment:function(t,e,n,i){for(var r,o,s,a,l,c,u=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if(r=t[p],r||0===r)if("object"===J.type(r))J.merge(h,r.nodeType?[r]:r);else if(jt.test(r)){for(o=o||u.appendChild(e.createElement("div")),s=($t.exec(r)||["",""])[1].toLowerCase(),a=Ot[s]||Ot._default,o.innerHTML=a[1]+r.replace(At,"<$1></$2>")+a[2],c=a[0];c--;)o=o.lastChild;J.merge(h,o.childNodes),o=u.firstChild,o.textContent=""}else h.push(e.createTextNode(r));for(u.textContent="",p=0;r=h[p++];)if((!i||J.inArray(r,i)===-1)&&(l=J.contains(r.ownerDocument,r),o=v(u.appendChild(r),"script"),l&&g(o),n))for(c=0;r=o[c++];)Lt.test(r.type||"")&&n.push(r);return u},cleanData:function(t){for(var e,n,i,r,o=J.event.special,s=0;void 0!==(n=t[s]);s++){if(J.acceptData(n)&&(r=n[vt.expando],r&&(e=vt.cache[r]))){if(e.events)for(i in e.events)o[i]?J.event.remove(n,i):J.removeEvent(n,i,e.handle);vt.cache[r]&&delete vt.cache[r]}delete yt.cache[n[yt.expando]]}}}),J.fn.extend({text:function(t){return mt(this,function(t){return void 0===t?J.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=p(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=p(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?J.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||J.cleanData(v(n)),n.parentNode&&(e&&J.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(J.cleanData(v(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return J.clone(this,t,e)})},html:function(t){return mt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!Ot[($t.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(At,"<$1></$2>");try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(J.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,J.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=Y.apply([],t);var n,i,r,o,s,a,l=0,c=this.length,u=this,h=c-1,p=t[0],g=J.isFunction(p);if(g||c>1&&"string"==typeof p&&!G.checkClone&&Nt.test(p))return this.each(function(n){var i=u.eq(n);g&&(t[0]=p.call(this,n,i.html())),i.domManip(t,e)});if(c&&(n=J.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(r=J.map(v(n,"script"),d),o=r.length;l<c;l++)s=n,l!==h&&(s=J.clone(s,!0,!0),o&&J.merge(r,v(s,"script"))),e.call(this[l],s,l);if(o)for(a=r[r.length-1].ownerDocument,J.map(r,f),l=0;l<o;l++)s=r[l],Lt.test(s.type||"")&&!vt.access(s,"globalEval")&&J.contains(a,s)&&(s.src?J._evalUrl&&J._evalUrl(s.src):J.globalEval(s.textContent.replace(It,"")))}return this}}),J.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){J.fn[t]=function(t){for(var n,i=[],r=J(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),J(r[s])[e](n),F.apply(i,n.get());return this.pushStack(i)}});var Wt,Ht={},qt=/^margin/,Xt=new RegExp("^("+xt+")(?!px)[a-z%]+$","i"),zt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",r.appendChild(o);var e=t.getComputedStyle(s,null);n="1%"!==e.top,i="4px"===e.width,r.removeChild(o)}var n,i,r=K.documentElement,o=K.createElement("div"),s=K.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",G.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),t.getComputedStyle&&J.extend(G,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},reliableMarginRight:function(){var e,n=s.appendChild(K.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",r.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),r.removeChild(o),s.removeChild(n),e}}))}(),J.swap=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r};var Yt=/^(none|table(?!-c[ea]).+)/,Ft=new RegExp("^("+xt+")(.*)$","i"),Bt=new RegExp("^([+-])=("+xt+")","i"),Ut={position:"absolute",visibility:"hidden",display:"block"},Qt={letterSpacing:"0",fontWeight:"400"},Vt=["Webkit","O","Moz","ms"];J.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=x(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=J.camelCase(e),l=t.style;return e=J.cssProps[a]||(J.cssProps[a]=T(l,a)),s=J.cssHooks[e]||J.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:l[e]:(o=typeof n,"string"===o&&(r=Bt.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(J.css(t,e)),o="number"),null!=n&&n===n&&("number"!==o||J.cssNumber[a]||(n+="px"),G.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n)),void 0)}},css:function(t,e,n,i){var r,o,s,a=J.camelCase(e);return e=J.cssProps[a]||(J.cssProps[a]=T(t.style,a)),s=J.cssHooks[e]||J.cssHooks[a],s&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=x(t,e,i)),"normal"===r&&e in Qt&&(r=Qt[e]),""===n||n?(o=parseFloat(r),n===!0||J.isNumeric(o)?o||0:r):r}}),J.each(["height","width"],function(t,e){J.cssHooks[e]={get:function(t,n,i){if(n)return Yt.test(J.css(t,"display"))&&0===t.offsetWidth?J.swap(t,Ut,function(){return S(t,e,i)}):S(t,e,i)},set:function(t,n,i){var r=i&&zt(t);return C(t,n,i?E(t,e,i,"border-box"===J.css(t,"boxSizing",!1,r),r):0)}}}),J.cssHooks.marginRight=_(G.reliableMarginRight,function(t,e){if(e)return J.swap(t,{display:"inline-block"},x,[t,"marginRight"])}),J.each({margin:"",padding:"",border:"Width"},function(t,e){J.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+_t[i]+e]=o[i]||o[i-2]||o[0];return r}},qt.test(t)||(J.cssHooks[t+e].set=C)}),J.fn.extend({css:function(t,e){return mt(this,function(t,e,n){var i,r,o={},s=0;if(J.isArray(e)){for(i=zt(t),r=e.length;s<r;s++)o[e[s]]=J.css(t,e[s],!1,i);return o}return void 0!==n?J.style(t,e,n):J.css(t,e)},t,e,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Tt(this)?J(this).show():J(this).hide()})}}),J.Tween=D,D.prototype={constructor:D,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(J.cssNumber[n]?"":"px")},cur:function(){var t=D.propHooks[this.prop];return t&&t.get?t.get(this):D.propHooks._default.get(this)},run:function(t){var e,n=D.propHooks[this.prop];return this.options.duration?this.pos=e=J.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=J.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){J.fx.step[t.prop]?J.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[J.cssProps[t.prop]]||J.cssHooks[t.prop])?J.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},J.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},J.fx=D.prototype.init,J.fx.step={};var Gt,Kt,Zt=/^(?:toggle|show|hide)$/,Jt=new RegExp("^(?:([+-])=|)("+xt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[j],ne={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=Jt.exec(e),o=r&&r[3]||(J.cssNumber[t]?"":"px"),s=(J.cssNumber[t]||"px"!==o&&+i)&&Jt.exec(J.css(n.elem,t)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],r=r||[],s=+i||1;do a=a||".5",s/=a,J.style(n.elem,t,s+o);while(a!==(a=n.cur()/i)&&1!==a&&--l)}return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};J.Animation=J.extend(N,{tweener:function(t,e){J.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;i<r;i++)n=t[i],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),J.speed=function(t,e,n){var i=t&&"object"==typeof t?J.extend({},t):{complete:n||!n&&e||J.isFunction(t)&&t,duration:t,easing:n&&e||e&&!J.isFunction(e)&&e};return i.duration=J.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in J.fx.speeds?J.fx.speeds[i.duration]:J.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){J.isFunction(i.old)&&i.old.call(this),i.queue&&J.dequeue(this,i.queue)},i},J.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Tt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=J.isEmptyObject(t),o=J.speed(e,n,i),s=function(){var e=N(this,J.extend({},t),o);(r||vt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=J.timers,s=vt.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&te.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||J.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=vt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=J.timers,s=i?i.length:0;for(n.finish=!0,J.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),J.each(["toggle","show","hide"],function(t,e){var n=J.fn[e];J.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(A(e,!0),t,i,r)}}),J.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){J.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),J.timers=[],J.fx.tick=function(){var t,e=0,n=J.timers;for(Gt=J.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||J.fx.stop(),Gt=void 0},J.fx.timer=function(t){J.timers.push(t),t()?J.fx.start():J.timers.pop()},J.fx.interval=13,J.fx.start=function(){Kt||(Kt=setInterval(J.fx.tick,J.fx.interval))},J.fx.stop=function(){clearInterval(Kt),Kt=null},J.fx.speeds={slow:600,fast:200,_default:400},J.fn.delay=function(t,e){return t=J.fx?J.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=K.createElement("input"),e=K.createElement("select"),n=e.appendChild(K.createElement("option"));t.type="checkbox",G.checkOn=""!==t.value,G.optSelected=n.selected,e.disabled=!0,G.optDisabled=!n.disabled,t=K.createElement("input"),t.value="t",t.type="radio",G.radioValue="t"===t.value}();var ie,re,oe=J.expr.attrHandle;J.fn.extend({attr:function(t,e){return mt(this,J.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){J.removeAttr(this,t)})}}),J.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return typeof t.getAttribute===Et?J.prop(t,e,n):(1===o&&J.isXMLDoc(t)||(e=e.toLowerCase(),i=J.attrHooks[e]||(J.expr.match.bool.test(e)?re:ie)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=J.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void J.removeAttr(t,e))},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(dt);if(o&&1===t.nodeType)for(;n=o[r++];)i=J.propFix[n]||n,J.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!G.radioValue&&"radio"===e&&J.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),re={set:function(t,e,n){return e===!1?J.removeAttr(t,n):t.setAttribute(n,n),n}},J.each(J.expr.match.bool.source.match(/\w+/g),function(t,e){var n=oe[e]||J.find.attr;oe[e]=function(t,e,i){var r,o;return i||(o=oe[e],oe[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,oe[e]=o),r}});var se=/^(?:input|select|textarea|button)$/i;J.fn.extend({prop:function(t,e){return mt(this,J.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[J.propFix[t]||t]})}}),J.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,r,o,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return o=1!==s||!J.isXMLDoc(t),o&&(e=J.propFix[e]||e,r=J.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||se.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),G.optSelected||(J.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),J.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){J.propFix[this.toLowerCase()]=this});var ae=/[\t\r\n\f]/g;J.fn.extend({addClass:function(t){var e,n,i,r,o,s,a="string"==typeof t&&t,l=0,c=this.length;if(J.isFunction(t))return this.each(function(e){J(this).addClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(dt)||[];l<c;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=J.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,r,o,s,a=0===arguments.length||"string"==typeof t&&t,l=0,c=this.length;if(J.isFunction(t))return this.each(function(e){J(this).removeClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(dt)||[];l<c;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");s=t?J.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):J.isFunction(t)?this.each(function(n){J(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var e,i=0,r=J(this),o=t.match(dt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else n!==Et&&"boolean"!==n||(this.className&&vt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":vt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;n<i;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(ae," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;J.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=J.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,J(this).val()):t,null==r?r="":"number"==typeof r?r+="":J.isArray(r)&&(r=J.map(r,function(t){return null==t?"":t+""})),e=J.valHooks[this.type]||J.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=J.valHooks[r.type]||J.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(le,""):null==n?"":n)}}}),J.extend({valHooks:{option:{get:function(t){var e=J.find.attr(t,"value");return null!=e?e:J.trim(J.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||r<0,s=o?null:[],a=o?r+1:i.length,l=r<0?a:o?r:0;l<a;l++)if(n=i[l],(n.selected||l===r)&&(G.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!J.nodeName(n.parentNode,"optgroup"))){if(e=J(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=J.makeArray(e),s=r.length;s--;)i=r[s],(i.selected=J.inArray(i.value,o)>=0)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),J.each(["radio","checkbox"],function(){J.valHooks[this]={set:function(t,e){if(J.isArray(e))return t.checked=J.inArray(J(t).val(),e)>=0}},G.checkOn||(J.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),J.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){J.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),J.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ce=J.now(),ue=/\?/;J.parseJSON=function(t){return JSON.parse(t+"")},J.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(i){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||J.error("Invalid XML: "+t),e};var he=/#.*$/,pe=/([?&])_=[^&]*/,de=/^(.*?):[ \t]*([^\r\n]*)$/gm,fe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,me=/^\/\//,ve=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},we={},be="*/".concat("*"),xe=t.location.href,_e=ve.exec(xe.toLowerCase())||[];J.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe,type:"GET",isLocal:fe.test(_e[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":J.parseJSON,"text xml":J.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?I(I(t,J.ajaxSettings),e):I(J.ajaxSettings,t)},ajaxPrefilter:L(ye),ajaxTransport:L(we),ajax:function(t,e){function n(t,e,n,s){var l,u,v,y,b,_=e;2!==w&&(w=2,a&&clearTimeout(a),i=void 0,o=s||"",x.readyState=t>0?4:0,l=t>=200&&t<300||304===t,n&&(y=O(h,x,n)),y=W(h,y,x,l),l?(h.ifModified&&(b=x.getResponseHeader("Last-Modified"),b&&(J.lastModified[r]=b),b=x.getResponseHeader("etag"),b&&(J.etag[r]=b)),204===t||"HEAD"===h.type?_="nocontent":304===t?_="notmodified":(_=y.state,u=y.data,v=y.error,l=!v)):(v=_,!t&&_||(_="error",t<0&&(t=0))),x.status=t,x.statusText=(e||_)+"",l?f.resolveWith(p,[u,_,x]):f.rejectWith(p,[x,_,v]),x.statusCode(m),m=void 0,c&&d.trigger(l?"ajaxSuccess":"ajaxError",[x,h,l?u:v]),g.fireWith(p,[x,_]),c&&(d.trigger("ajaxComplete",[x,h]),--J.active||J.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,s,a,l,c,u,h=J.ajaxSetup({},e),p=h.context||h,d=h.context&&(p.nodeType||p.jquery)?J(p):J.event,f=J.Deferred(),g=J.Callbacks("once memory"),m=h.statusCode||{},v={},y={},w=0,b="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!s)for(s={};e=de.exec(o);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?o:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=y[n]=y[n]||t,v[t]=e),this},overrideMimeType:function(t){return w||(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)m[e]=[m[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||b;return i&&i.abort(e),n(0,e),this}};if(f.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,h.url=((t||h.url||xe)+"").replace(he,"").replace(me,_e[1]+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=J.trim(h.dataType||"*").toLowerCase().match(dt)||[""],null==h.crossDomain&&(l=ve.exec(h.url.toLowerCase()),h.crossDomain=!(!l||l[1]===_e[1]&&l[2]===_e[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(_e[3]||("http:"===_e[1]?"80":"443")))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=J.param(h.data,h.traditional)),M(ye,h,e,x),2===w)return x;c=J.event&&h.global,c&&0===J.active++&&J.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!ge.test(h.type),r=h.url,h.hasContent||(h.data&&(r=h.url+=(ue.test(r)?"&":"?")+h.data,delete h.data),h.cache===!1&&(h.url=pe.test(r)?r.replace(pe,"$1_="+ce++):r+(ue.test(r)?"&":"?")+"_="+ce++)),h.ifModified&&(J.lastModified[r]&&x.setRequestHeader("If-Modified-Since",J.lastModified[r]),J.etag[r]&&x.setRequestHeader("If-None-Match",J.etag[r])),(h.data&&h.hasContent&&h.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+be+"; q=0.01":""):h.accepts["*"]);for(u in h.headers)x.setRequestHeader(u,h.headers[u]);if(h.beforeSend&&(h.beforeSend.call(p,x,h)===!1||2===w))return x.abort();b="abort";for(u in{success:1,error:1,complete:1})x[u](h[u]);if(i=M(we,h,e,x)){x.readyState=1,c&&d.trigger("ajaxSend",[x,h]),h.async&&h.timeout>0&&(a=setTimeout(function(){x.abort("timeout")},h.timeout));try{w=1,i.send(v,n)}catch(_){if(!(w<2))throw _;n(-1,_)}}else n(-1,"No Transport");return x},getJSON:function(t,e,n){return J.get(t,e,n,"json")},getScript:function(t,e){return J.get(t,void 0,e,"script")}}),J.each(["get","post"],function(t,e){J[e]=function(t,n,i,r){return J.isFunction(n)&&(r=r||i,i=n,n=void 0),J.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),J._evalUrl=function(t){return J.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},J.fn.extend({wrapAll:function(t){var e;return J.isFunction(t)?this.each(function(e){J(this).wrapAll(t.call(this,e))}):(this[0]&&(e=J(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return J.isFunction(t)?this.each(function(e){J(this).wrapInner(t.call(this,e))}):this.each(function(){var e=J(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=J.isFunction(t);return this.each(function(n){J(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){J.nodeName(this,"body")||J(this).replaceWith(this.childNodes)}).end()}}),J.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},J.expr.filters.visible=function(t){return!J.expr.filters.hidden(t)};var Te=/%20/g,Ce=/\[\]$/,Ee=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,ke=/^(?:input|select|textarea|keygen)/i;J.param=function(t,e){var n,i=[],r=function(t,e){e=J.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=J.ajaxSettings&&J.ajaxSettings.traditional),
J.isArray(t)||t.jquery&&!J.isPlainObject(t))J.each(t,function(){r(this.name,this.value)});else for(n in t)H(n,t[n],e,r);return i.join("&").replace(Te,"+")},J.fn.extend({serialize:function(){return J.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=J.prop(this,"elements");return t?J.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!J(this).is(":disabled")&&ke.test(this.nodeName)&&!Se.test(t)&&(this.checked||!Ct.test(t))}).map(function(t,e){var n=J(this).val();return null==n?null:J.isArray(n)?J.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}}),J.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var De=0,Re={},Ae={0:200,1223:204},$e=J.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Re)Re[t]()}),G.cors=!!$e&&"withCredentials"in $e,G.ajax=$e=!!$e,J.ajaxTransport(function(t){var e;if(G.cors||$e&&!t.crossDomain)return{send:function(n,i){var r,o=t.xhr(),s=++De;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)o.setRequestHeader(r,n[r]);e=function(t){return function(){e&&(delete Re[s],e=o.onload=o.onerror=null,"abort"===t?o.abort():"error"===t?i(o.status,o.statusText):i(Ae[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=e(),o.onerror=e("error"),e=Re[s]=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(a){if(e)throw a}},abort:function(){e&&e()}}}),J.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return J.globalEval(t),t}}}),J.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),J.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=J("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),K.head.appendChild(e[0])},abort:function(){n&&n()}}}});var je=[],Pe=/(=)\?(?=&|$)|\?\?/;J.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=je.pop()||J.expando+"_"+ce++;return this[t]=!0,t}}),J.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=e.jsonp!==!1&&(Pe.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Pe.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=J.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Pe,"$1"+r):e.jsonp!==!1&&(e.url+=(ue.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||J.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,je.push(r)),s&&J.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),J.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||K;var i=st.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=J.buildFragment([t],e,r),r&&r.length&&J(r).remove(),J.merge([],i.childNodes))};var Ne=J.fn.load;J.fn.load=function(t,e,n){if("string"!=typeof t&&Ne)return Ne.apply(this,arguments);var i,r,o,s=this,a=t.indexOf(" ");return a>=0&&(i=J.trim(t.slice(a)),t=t.slice(0,a)),J.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&J.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?J("<div>").append(J.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){s.each(n,o||[t.responseText,e,t])}),this},J.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){J.fn[e]=function(t){return this.on(e,t)}}),J.expr.filters.animated=function(t){return J.grep(J.timers,function(e){return t===e.elem}).length};var Le=t.document.documentElement;J.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,c,u=J.css(t,"position"),h=J(t),p={};"static"===u&&(t.style.position="relative"),a=h.offset(),o=J.css(t,"top"),l=J.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=h.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),J.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+r),"using"in e?e.using.call(t,p):h.css(p)}},J.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){J.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;if(o)return e=o.documentElement,J.contains(e,i)?(typeof i.getBoundingClientRect!==Et&&(r=i.getBoundingClientRect()),n=q(o),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===J.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),J.nodeName(t[0],"html")||(i=t.offset()),i.top+=J.css(t[0],"borderTopWidth",!0),i.left+=J.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-J.css(n,"marginTop",!0),left:e.left-i.left-J.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Le;t&&!J.nodeName(t,"html")&&"static"===J.css(t,"position");)t=t.offsetParent;return t||Le})}}),J.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;J.fn[e]=function(r){return mt(this,function(e,r,o){var s=q(e);return void 0===o?s?s[n]:e[r]:void(s?s.scrollTo(i?t.pageXOffset:o,i?o:t.pageYOffset):e[r]=o)},e,r,arguments.length,null)}}),J.each(["top","left"],function(t,e){J.cssHooks[e]=_(G.pixelPosition,function(t,n){if(n)return n=x(t,e),Xt.test(n)?J(t).position()[e]+"px":n})}),J.each({Height:"height",Width:"width"},function(t,e){J.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){J.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return mt(this,function(e,n,i){var r;return J.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?J.css(e,n,s):J.style(e,n,i,s)},e,o?i:void 0,o,null)}})}),J.fn.size=function(){return this.length},J.fn.andSelf=J.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return J});var Me=t.jQuery,Ie=t.$;return J.noConflict=function(e){return t.$===J&&(t.$=Ie),e&&t.jQuery===J&&(t.jQuery=Me),J},typeof e===Et&&(t.jQuery=t.$=J),J}),/*!
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 *
 * Open source under the BSD License.
 *
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
jQuery.easing.jswing=jQuery.easing.swing,jQuery.extend(jQuery.easing,{def:"easeOutQuad",swing:function(t,e,n,i,r){return jQuery.easing[jQuery.easing.def](t,e,n,i,r)},easeInQuad:function(t,e,n,i,r){return i*(e/=r)*e+n},easeOutQuad:function(t,e,n,i,r){return-i*(e/=r)*(e-2)+n},easeInOutQuad:function(t,e,n,i,r){return(e/=r/2)<1?i/2*e*e+n:-i/2*(--e*(e-2)-1)+n},easeInCubic:function(t,e,n,i,r){return i*(e/=r)*e*e+n},easeOutCubic:function(t,e,n,i,r){return i*((e=e/r-1)*e*e+1)+n},easeInOutCubic:function(t,e,n,i,r){return(e/=r/2)<1?i/2*e*e*e+n:i/2*((e-=2)*e*e+2)+n},easeInQuart:function(t,e,n,i,r){return i*(e/=r)*e*e*e+n},easeOutQuart:function(t,e,n,i,r){return-i*((e=e/r-1)*e*e*e-1)+n},easeInOutQuart:function(t,e,n,i,r){return(e/=r/2)<1?i/2*e*e*e*e+n:-i/2*((e-=2)*e*e*e-2)+n},easeInQuint:function(t,e,n,i,r){return i*(e/=r)*e*e*e*e+n},easeOutQuint:function(t,e,n,i,r){return i*((e=e/r-1)*e*e*e*e+1)+n},easeInOutQuint:function(t,e,n,i,r){return(e/=r/2)<1?i/2*e*e*e*e*e+n:i/2*((e-=2)*e*e*e*e+2)+n},easeInSine:function(t,e,n,i,r){return-i*Math.cos(e/r*(Math.PI/2))+i+n},easeOutSine:function(t,e,n,i,r){return i*Math.sin(e/r*(Math.PI/2))+n},easeInOutSine:function(t,e,n,i,r){return-i/2*(Math.cos(Math.PI*e/r)-1)+n},easeInExpo:function(t,e,n,i,r){return 0==e?n:i*Math.pow(2,10*(e/r-1))+n},easeOutExpo:function(t,e,n,i,r){return e==r?n+i:i*(-Math.pow(2,-10*e/r)+1)+n},easeInOutExpo:function(t,e,n,i,r){return 0==e?n:e==r?n+i:(e/=r/2)<1?i/2*Math.pow(2,10*(e-1))+n:i/2*(-Math.pow(2,-10*--e)+2)+n},easeInCirc:function(t,e,n,i,r){return-i*(Math.sqrt(1-(e/=r)*e)-1)+n},easeOutCirc:function(t,e,n,i,r){return i*Math.sqrt(1-(e=e/r-1)*e)+n},easeInOutCirc:function(t,e,n,i,r){return(e/=r/2)<1?-i/2*(Math.sqrt(1-e*e)-1)+n:i/2*(Math.sqrt(1-(e-=2)*e)+1)+n},easeInElastic:function(t,e,n,i,r){var o=1.70158,s=0,a=i;if(0==e)return n;if(1==(e/=r))return n+i;if(s||(s=.3*r),a<Math.abs(i)){a=i;var o=s/4}else var o=s/(2*Math.PI)*Math.asin(i/a);return-(a*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/s))+n},easeOutElastic:function(t,e,n,i,r){var o=1.70158,s=0,a=i;if(0==e)return n;if(1==(e/=r))return n+i;if(s||(s=.3*r),a<Math.abs(i)){a=i;var o=s/4}else var o=s/(2*Math.PI)*Math.asin(i/a);return a*Math.pow(2,-10*e)*Math.sin((e*r-o)*(2*Math.PI)/s)+i+n},easeInOutElastic:function(t,e,n,i,r){var o=1.70158,s=0,a=i;if(0==e)return n;if(2==(e/=r/2))return n+i;if(s||(s=r*(.3*1.5)),a<Math.abs(i)){a=i;var o=s/4}else var o=s/(2*Math.PI)*Math.asin(i/a);return e<1?-.5*(a*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/s))+n:a*Math.pow(2,-10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/s)*.5+i+n},easeInBack:function(t,e,n,i,r,o){return void 0==o&&(o=1.70158),i*(e/=r)*e*((o+1)*e-o)+n},easeOutBack:function(t,e,n,i,r,o){return void 0==o&&(o=1.70158),i*((e=e/r-1)*e*((o+1)*e+o)+1)+n},easeInOutBack:function(t,e,n,i,r,o){return void 0==o&&(o=1.70158),(e/=r/2)<1?i/2*(e*e*(((o*=1.525)+1)*e-o))+n:i/2*((e-=2)*e*(((o*=1.525)+1)*e+o)+2)+n},easeInBounce:function(t,e,n,i,r){return i-jQuery.easing.easeOutBounce(t,r-e,0,i,r)+n},easeOutBounce:function(t,e,n,i,r){return(e/=r)<1/2.75?i*(7.5625*e*e)+n:e<2/2.75?i*(7.5625*(e-=1.5/2.75)*e+.75)+n:e<2.5/2.75?i*(7.5625*(e-=2.25/2.75)*e+.9375)+n:i*(7.5625*(e-=2.625/2.75)*e+.984375)+n},easeInOutBounce:function(t,e,n,i,r){return e<r/2?.5*jQuery.easing.easeInBounce(t,2*e,0,i,r)+n:.5*jQuery.easing.easeOutBounce(t,2*e-r,0,i,r)+.5*i+n}}),/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(t,e,n,i){"use strict";function r(t,e,n){return setTimeout(c(t,n),e)}function o(t,e,n){return!!Array.isArray(t)&&(s(t,n[e],n),!0)}function s(t,e,n){var r;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==i)for(r=0;r<t.length;)e.call(n,t[r],r,t),r++;else for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t)}function a(e,n,i){var r="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=t.console&&(t.console.warn||t.console.log);return o&&o.call(t.console,r,i),e.apply(this,arguments)}}function l(t,e,n){var i,r=e.prototype;i=t.prototype=Object.create(r),i.constructor=t,i._super=r,n&&ht(i,n)}function c(t,e){return function(){return t.apply(e,arguments)}}function u(t,e){return typeof t==ft?t.apply(e?e[0]||i:i,e):t}function h(t,e){return t===i?e:t}function p(t,e,n){s(m(e),function(e){t.addEventListener(e,n,!1)})}function d(t,e,n){s(m(e),function(e){t.removeEventListener(e,n,!1)})}function f(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function g(t,e){return t.indexOf(e)>-1}function m(t){return t.trim().split(/\s+/g)}function v(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function y(t){return Array.prototype.slice.call(t,0)}function w(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];v(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function b(t,e){for(var n,r,o=e[0].toUpperCase()+e.slice(1),s=0;s<pt.length;){if(n=pt[s],r=n?n+o:e,r in t)return r;s++}return i}function x(){return bt++}function _(e){var n=e.ownerDocument||e;return n.defaultView||n.parentWindow||t}function T(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){u(t.options.enable,[t])&&n.handler(e)},this.init()}function C(t){var e,n=t.options.inputClass;return new(e=n?n:Tt?O:Ct?q:_t?z:I)(t,E)}function E(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&At&&i-r===0,s=e&(jt|Pt)&&i-r===0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,S(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function S(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=R(e)),r>1&&!n.firstMultiple?n.firstMultiple=R(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,a=s?s.center:o.center,l=e.center=A(i);e.timeStamp=vt(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=N(a,l),e.distance=P(a,l),k(n,e),e.offsetDirection=j(e.deltaX,e.deltaY);var c=$(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=mt(c.x)>mt(c.y)?c.x:c.y,e.scale=s?M(s.pointers,i):1,e.rotation=s?L(s.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,D(n,e);var u=t.element;f(e.srcEvent.target,u)&&(u=e.srcEvent.target),e.target=u}function k(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};e.eventType!==At&&o.eventType!==jt||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}function D(t,e){var n,r,o,s,a=t.lastInterval||e,l=e.timeStamp-a.timeStamp;if(e.eventType!=Pt&&(l>Rt||a.velocity===i)){var c=e.deltaX-a.deltaX,u=e.deltaY-a.deltaY,h=$(l,c,u);r=h.x,o=h.y,n=mt(h.x)>mt(h.y)?h.x:h.y,s=j(c,u),t.lastInterval=e}else n=a.velocity,r=a.velocityX,o=a.velocityY,s=a.direction;e.velocity=n,e.velocityX=r,e.velocityY=o,e.direction=s}function R(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:gt(t.pointers[n].clientX),clientY:gt(t.pointers[n].clientY)},n++;return{timeStamp:vt(),pointers:e,center:A(e),deltaX:t.deltaX,deltaY:t.deltaY}}function A(t){var e=t.length;if(1===e)return{x:gt(t[0].clientX),y:gt(t[0].clientY)};for(var n=0,i=0,r=0;e>r;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:gt(n/e),y:gt(i/e)}}function $(t,e,n){return{x:e/t||0,y:n/t||0}}function j(t,e){return t===e?Nt:mt(t)>=mt(e)?0>t?Lt:Mt:0>e?It:Ot}function P(t,e,n){n||(n=Xt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function N(t,e,n){n||(n=Xt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}function L(t,e){return N(e[1],e[0],zt)+N(t[1],t[0],zt)}function M(t,e){return P(e[0],e[1],zt)/P(t[0],t[1],zt)}function I(){this.evEl=Ft,this.evWin=Bt,this.pressed=!1,T.apply(this,arguments)}function O(){this.evEl=Vt,this.evWin=Gt,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function W(){this.evTarget=Zt,this.evWin=Jt,this.started=!1,T.apply(this,arguments)}function H(t,e){var n=y(t.touches),i=y(t.changedTouches);return e&(jt|Pt)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function q(){this.evTarget=ee,this.targetIds={},T.apply(this,arguments)}function X(t,e){var n=y(t.touches),i=this.targetIds;if(e&(At|$t)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=y(t.changedTouches),a=[],l=this.target;if(o=n.filter(function(t){return f(t.target,l)}),e===At)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(jt|Pt)&&delete i[s[r].identifier],r++;return a.length?[w(o.concat(a),"identifier",!0),a]:void 0}function z(){T.apply(this,arguments);var t=c(this.handler,this);this.touch=new q(this.manager,t),this.mouse=new I(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function Y(t,e){t&At?(this.primaryTouch=e.changedPointers[0].identifier,F.call(this,e)):t&(jt|Pt)&&F.call(this,e)}function F(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches,r=function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)};setTimeout(r,ne)}}function B(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),s=Math.abs(n-r.y);if(ie>=o&&ie>=s)return!0}return!1}function U(t,e){this.manager=t,this.set(e)}function Q(t){if(g(t,ce))return ce;var e=g(t,ue),n=g(t,he);return e&&n?ce:e||n?e?ue:he:g(t,le)?le:ae}function V(){if(!oe)return!1;var e={},n=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){e[i]=!n||t.CSS.supports("touch-action",i)}),e}function G(t){this.options=ht({},this.defaults,t||{}),this.id=x(),this.manager=null,this.options.enable=h(this.options.enable,!0),this.state=de,this.simultaneous={},this.requireFail=[]}function K(t){return t&ye?"cancel":t&me?"end":t&ge?"move":t&fe?"start":""}function Z(t){return t==Ot?"down":t==It?"up":t==Lt?"left":t==Mt?"right":""}function J(t,e){var n=e.manager;return n?n.get(t):t}function tt(){G.apply(this,arguments)}function et(){tt.apply(this,arguments),this.pX=null,this.pY=null}function nt(){tt.apply(this,arguments)}function it(){G.apply(this,arguments),this._timer=null,this._input=null}function rt(){tt.apply(this,arguments)}function ot(){tt.apply(this,arguments)}function st(){G.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function at(t,e){return e=e||{},e.recognizers=h(e.recognizers,at.defaults.preset),new lt(t,e)}function lt(t,e){this.options=ht({},at.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=C(this),this.touchAction=new U(this,this.options.touchAction),ct(this,!0),s(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ct(t,e){var n=t.element;if(n.style){var i;s(t.options.cssProps,function(r,o){i=b(n.style,o),e?(t.oldCssProps[i]=n.style[i],n.style[i]=r):n.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={})}}function ut(t,n){var i=e.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var ht,pt=["","webkit","Moz","MS","ms","o"],dt=e.createElement("div"),ft="function",gt=Math.round,mt=Math.abs,vt=Date.now;ht="function"!=typeof Object.assign?function(t){if(t===i||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var r=arguments[n];if(r!==i&&null!==r)for(var o in r)r.hasOwnProperty(o)&&(e[o]=r[o])}return e}:Object.assign;var yt=a(function(t,e,n){for(var r=Object.keys(e),o=0;o<r.length;)(!n||n&&t[r[o]]===i)&&(t[r[o]]=e[r[o]]),o++;return t},"extend","Use `assign`."),wt=a(function(t,e){return yt(t,e,!0)},"merge","Use `assign`."),bt=1,xt=/mobile|tablet|ip(ad|hone|od)|android/i,_t="ontouchstart"in t,Tt=b(t,"PointerEvent")!==i,Ct=_t&&xt.test(navigator.userAgent),Et="touch",St="pen",kt="mouse",Dt="kinect",Rt=25,At=1,$t=2,jt=4,Pt=8,Nt=1,Lt=2,Mt=4,It=8,Ot=16,Wt=Lt|Mt,Ht=It|Ot,qt=Wt|Ht,Xt=["x","y"],zt=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&p(this.element,this.evEl,this.domHandler),this.evTarget&&p(this.target,this.evTarget,this.domHandler),this.evWin&&p(_(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(_(this.element),this.evWin,this.domHandler)}};var Yt={mousedown:At,mousemove:$t,mouseup:jt},Ft="mousedown",Bt="mousemove mouseup";l(I,T,{handler:function(t){var e=Yt[t.type];e&At&&0===t.button&&(this.pressed=!0),e&$t&&1!==t.which&&(e=jt),this.pressed&&(e&jt&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:kt,srcEvent:t}))}});var Ut={pointerdown:At,pointermove:$t,pointerup:jt,pointercancel:Pt,pointerout:Pt},Qt={2:Et,3:St,4:kt,5:Dt},Vt="pointerdown",Gt="pointermove pointerup pointercancel";t.MSPointerEvent&&!t.PointerEvent&&(Vt="MSPointerDown",Gt="MSPointerMove MSPointerUp MSPointerCancel"),l(O,T,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=Ut[i],o=Qt[t.pointerType]||t.pointerType,s=o==Et,a=v(e,t.pointerId,"pointerId");r&At&&(0===t.button||s)?0>a&&(e.push(t),a=e.length-1):r&(jt|Pt)&&(n=!0),0>a||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var Kt={touchstart:At,touchmove:$t,touchend:jt,touchcancel:Pt},Zt="touchstart",Jt="touchstart touchmove touchend touchcancel";l(W,T,{handler:function(t){var e=Kt[t.type];if(e===At&&(this.started=!0),this.started){var n=H.call(this,t,e);e&(jt|Pt)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Et,srcEvent:t})}}});var te={touchstart:At,touchmove:$t,touchend:jt,touchcancel:Pt},ee="touchstart touchmove touchend touchcancel";l(q,T,{handler:function(t){var e=te[t.type],n=X.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Et,srcEvent:t})}});var ne=2500,ie=25;l(z,T,{handler:function(t,e,n){var i=n.pointerType==Et,r=n.pointerType==kt;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)Y.call(this,e,n);else if(r&&B.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var re=b(dt.style,"touchAction"),oe=re!==i,se="compute",ae="auto",le="manipulation",ce="none",ue="pan-x",he="pan-y",pe=V();U.prototype={set:function(t){t==se&&(t=this.compute()),oe&&this.manager.element.style&&pe[t]&&(this.manager.element.style[re]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return s(this.manager.recognizers,function(e){u(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),Q(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,r=g(i,ce)&&!pe[ce],o=g(i,he)&&!pe[he],s=g(i,ue)&&!pe[ue];if(r){var a=1===t.pointers.length,l=t.distance<2,c=t.deltaTime<250;if(a&&l&&c)return}return s&&o?void 0:r||o&&n&Wt||s&&n&Ht?this.preventSrc(e):void 0},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var de=1,fe=2,ge=4,me=8,ve=me,ye=16,we=32;G.prototype={defaults:{},set:function(t){return ht(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(o(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=J(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return o(t,"dropRecognizeWith",this)?this:(t=J(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(o(t,"requireFailure",this))return this;var e=this.requireFail;return t=J(t,this),-1===v(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(o(t,"dropRequireFailure",this))return this;t=J(t,this);var e=v(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(e,t)}var n=this,i=this.state;me>i&&e(n.options.event+K(i)),e(n.options.event),t.additionalEvent&&e(t.additionalEvent),i>=me&&e(n.options.event+K(i))},tryEmit:function(t){return this.canEmit()?this.emit(t):void(this.state=we)},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(we|de)))return!1;t++}return!0},recognize:function(t){var e=ht({},t);return u(this.options.enable,[this,e])?(this.state&(ve|ye|we)&&(this.state=de),this.state=this.process(e),void(this.state&(fe|ge|me|ye)&&this.tryEmit(e))):(this.reset(),void(this.state=we))},process:function(t){},getTouchAction:function(){},reset:function(){}},l(tt,G,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(fe|ge),r=this.attrTest(t);return i&&(n&Pt||!r)?e|ye:i||r?n&jt?e|me:e&fe?e|ge:fe:we}}),l(et,tt,{defaults:{event:"pan",threshold:10,pointers:1,direction:qt},getTouchAction:function(){var t=this.options.direction,e=[];return t&Wt&&e.push(he),t&Ht&&e.push(ue),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&Wt?(r=0===o?Nt:0>o?Lt:Mt,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?Nt:0>s?It:Ot,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return tt.prototype.attrTest.call(this,t)&&(this.state&fe||!(this.state&fe)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Z(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),l(nt,tt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[ce]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&fe)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),l(it,G,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[ae]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,o=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(jt|Pt)&&!o)this.reset();else if(t.eventType&At)this.reset(),this._timer=r(function(){this.state=ve,this.tryEmit()},e.time,this);else if(t.eventType&jt)return ve;return we},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===ve&&(t&&t.eventType&jt?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=vt(),this.manager.emit(this.options.event,this._input)))}}),l(rt,tt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[ce]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&fe)}}),l(ot,tt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Wt|Ht,pointers:1},getTouchAction:function(){return et.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(Wt|Ht)?e=t.overallVelocity:n&Wt?e=t.overallVelocityX:n&Ht&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&mt(e)>this.options.velocity&&t.eventType&jt},emit:function(t){var e=Z(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),l(st,G,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[le]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,o=t.deltaTime<e.time;if(this.reset(),t.eventType&At&&0===this.count)return this.failTimeout();if(i&&o&&n){if(t.eventType!=jt)return this.failTimeout();var s=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||P(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&s?this.count+=1:this.count=1,this._input=t;var l=this.count%e.taps;if(0===l)return this.hasRequireFailures()?(this._timer=r(function(){this.state=ve,this.tryEmit()},e.interval,this),fe):ve}return we},failTimeout:function(){return this._timer=r(function(){this.state=we},this.options.interval,this),we},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==ve&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),at.VERSION="2.0.7",at.defaults={domEvents:!1,touchAction:se,enable:!0,inputTarget:null,inputClass:null,preset:[[rt,{enable:!1}],[nt,{enable:!1},["rotate"]],[ot,{direction:Wt}],[et,{direction:Wt},["swipe"]],[st],[st,{event:"doubletap",taps:2},["tap"]],[it]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var be=1,xe=2;lt.prototype={set:function(t){return ht(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?xe:be},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,r=e.curRecognizer;(!r||r&&r.state&ve)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],e.stopped===xe||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&n.state&(fe|ge|me)&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof G)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(o(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(o(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=v(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==i&&e!==i){var n=this.handlers;return s(m(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this}},off:function(t,e){if(t!==i){var n=this.handlers;return s(m(t),function(t){e?n[t]&&n[t].splice(v(n[t],e),1):delete n[t]}),this}},emit:function(t,e){this.options.domEvents&&ut(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ct(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ht(at,{INPUT_START:At,INPUT_MOVE:$t,INPUT_END:jt,INPUT_CANCEL:Pt,STATE_POSSIBLE:de,STATE_BEGAN:fe,STATE_CHANGED:ge,STATE_ENDED:me,STATE_RECOGNIZED:ve,STATE_CANCELLED:ye,STATE_FAILED:we,DIRECTION_NONE:Nt,DIRECTION_LEFT:Lt,DIRECTION_RIGHT:Mt,DIRECTION_UP:It,DIRECTION_DOWN:Ot,DIRECTION_HORIZONTAL:Wt,DIRECTION_VERTICAL:Ht,DIRECTION_ALL:qt,Manager:lt,Input:T,TouchAction:U,TouchInput:q,MouseInput:I,PointerEventInput:O,TouchMouseInput:z,SingleTouchInput:W,Recognizer:G,AttrRecognizer:tt,Tap:st,Pan:et,Swipe:ot,Pinch:nt,Rotate:rt,Press:it,on:p,off:d,each:s,merge:wt,extend:yt,assign:ht,inherit:l,bindFn:c,prefixed:b});var _e="undefined"!=typeof t?t:"undefined"!=typeof self?self:{};_e.Hammer=at,"function"==typeof define&&define.amd?define(function(){return at}):"undefined"!=typeof module&&module.exports?module.exports=at:t[n]=at}(window,document,"Hammer"),/*! pace 1.0.2 */
function(){var t,e,n,i,r,o,s,a,l,c,u,h,p,d,f,g,m,v,y,w,b,x,_,T,C,E,S,k,D,R,A,$,j,P,N,L,M,I,O,W,H,q,X,z,Y,F,B,U,Q,V=[].slice,G={}.hasOwnProperty,K=function(t,e){function n(){this.constructor=t}for(var i in e)G.call(e,i)&&(t[i]=e[i]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},Z=[].indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(e in this&&this[e]===t)return e;return-1};for(b={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},D=function(){var t;return null!=(t="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?t:+new Date},A=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,w=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==A&&(A=function(t){return setTimeout(t,50)},w=function(t){return clearTimeout(t)}),j=function(t){var e,n;return e=D(),(n=function(){var i;return i=D()-e,i>=33?(e=D(),t(i,function(){return A(n)})):setTimeout(n,33-i)})()},$=function(){var t,e,n;return n=arguments[0],e=arguments[1],t=3<=arguments.length?V.call(arguments,2):[],"function"==typeof n[e]?n[e].apply(n,t):n[e]},x=function(){var t,e,n,i,r,o,s;for(e=arguments[0],i=2<=arguments.length?V.call(arguments,1):[],o=0,s=i.length;s>o;o++)if(n=i[o])for(t in n)G.call(n,t)&&(r=n[t],null!=e[t]&&"object"==typeof e[t]&&null!=r&&"object"==typeof r?x(e[t],r):e[t]=r);return e},m=function(t){var e,n,i,r,o;for(n=e=0,r=0,o=t.length;o>r;r++)i=t[r],n+=Math.abs(i),e++;return n/e},T=function(t,e){var n,i,r;if(null==t&&(t="options"),null==e&&(e=!0),r=document.querySelector("[data-pace-"+t+"]")){if(n=r.getAttribute("data-pace-"+t),!e)return n;try{return JSON.parse(n)}catch(o){return i=o,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",i):void 0}}},s=function(){function t(){}return t.prototype.on=function(t,e,n,i){var r;return null==i&&(i=!1),null==this.bindings&&(this.bindings={}),null==(r=this.bindings)[t]&&(r[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:i})},t.prototype.once=function(t,e,n){return this.on(t,e,n,!0)},t.prototype.off=function(t,e){var n,i,r;if(null!=(null!=(i=this.bindings)?i[t]:void 0)){if(null==e)return delete this.bindings[t];for(n=0,r=[];n<this.bindings[t].length;)r.push(this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):n++);return r}},t.prototype.trigger=function(){var t,e,n,i,r,o,s,a,l;if(n=arguments[0],t=2<=arguments.length?V.call(arguments,1):[],null!=(s=this.bindings)?s[n]:void 0){for(r=0,l=[];r<this.bindings[n].length;)a=this.bindings[n][r],i=a.handler,e=a.ctx,o=a.once,i.apply(null!=e?e:this,t),l.push(o?this.bindings[n].splice(r,1):r++);return l}},t}(),c=window.Pace||{},window.Pace=c,x(c,s.prototype),R=c.options=x({},b,window.paceOptions,T()),B=["ajax","document","eventLag","elements"],X=0,Y=B.length;Y>X;X++)M=B[X],R[M]===!0&&(R[M]=b[M]);l=function(t){function e(){return U=e.__super__.constructor.apply(this,arguments)}return K(e,t),e}(Error),e=function(){function t(){this.progress=0}return t.prototype.getElement=function(){var t;if(null==this.el){if(t=document.querySelector(R.target),!t)throw new l;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=t.firstChild?t.insertBefore(this.el,t.firstChild):t.appendChild(this.el)}return this.el},t.prototype.finish=function(){var t;return t=this.getElement(),t.className=t.className.replace("pace-active",""),t.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},t.prototype.update=function(t){return this.progress=t,this.render()},t.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(t){l=t}return this.el=void 0},t.prototype.render=function(){var t,e,n,i,r,o,s;if(null==document.querySelector(R.target))return!1;for(t=this.getElement(),i="translate3d("+this.progress+"%, 0, 0)",s=["webkitTransform","msTransform","transform"],r=0,o=s.length;o>r;r++)e=s[r],t.children[0].style[e]=i;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(t.children[0].setAttribute("data-progress-text",""+(0|this.progress)+"%"),this.progress>=100?n="99":(n=this.progress<10?"0":"",n+=0|this.progress),t.children[0].setAttribute("data-progress",""+n)),this.lastRenderedProgress=this.progress},t.prototype.done=function(){return this.progress>=100},t}(),a=function(){function t(){this.bindings={}}return t.prototype.trigger=function(t,e){var n,i,r,o,s;if(null!=this.bindings[t]){for(o=this.bindings[t],s=[],i=0,r=o.length;r>i;i++)n=o[i],s.push(n.call(this,e));return s}},t.prototype.on=function(t,e){var n;return null==(n=this.bindings)[t]&&(n[t]=[]),this.bindings[t].push(e)},t}(),q=window.XMLHttpRequest,H=window.XDomainRequest,W=window.WebSocket,_=function(t,e){var n,i,r;r=[];for(i in e.prototype)try{r.push(null==t[i]&&"function"!=typeof e[i]?"function"==typeof Object.defineProperty?Object.defineProperty(t,i,{get:function(){return e.prototype[i]},configurable:!0,enumerable:!0}):t[i]=e.prototype[i]:void 0)}catch(o){n=o}return r},S=[],c.ignore=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?V.call(arguments,1):[],S.unshift("ignore"),n=e.apply(null,t),S.shift(),n},c.track=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?V.call(arguments,1):[],S.unshift("track"),n=e.apply(null,t),S.shift(),n},L=function(t){var e;if(null==t&&(t="GET"),"track"===S[0])return"force";if(!S.length&&R.ajax){if("socket"===t&&R.ajax.trackWebSockets)return!0;if(e=t.toUpperCase(),Z.call(R.ajax.trackMethods,e)>=0)return!0}return!1},u=function(t){function e(){var t,n=this;e.__super__.constructor.apply(this,arguments),t=function(t){var e;return e=t.open,t.open=function(i,r){return L(i)&&n.trigger("request",{type:i,url:r,request:t}),e.apply(t,arguments)}},window.XMLHttpRequest=function(e){var n;return n=new q(e),t(n),n};try{_(window.XMLHttpRequest,q)}catch(i){}if(null!=H){window.XDomainRequest=function(){var e;return e=new H,t(e),e};try{_(window.XDomainRequest,H)}catch(i){}}if(null!=W&&R.ajax.trackWebSockets){window.WebSocket=function(t,e){var i;return i=null!=e?new W(t,e):new W(t),L("socket")&&n.trigger("request",{type:"socket",url:t,protocols:e,request:i}),i};try{_(window.WebSocket,W)}catch(i){}}}return K(e,t),e}(a),z=null,C=function(){return null==z&&(z=new u),z},N=function(t){var e,n,i,r;for(r=R.ajax.ignoreURLs,n=0,i=r.length;i>n;n++)if(e=r[n],"string"==typeof e){if(-1!==t.indexOf(e))return!0}else if(e.test(t))return!0;return!1},C().on("request",function(e){var n,i,r,o,s;return o=e.type,r=e.request,s=e.url,N(s)?void 0:c.running||R.restartOnRequestAfter===!1&&"force"!==L(o)?void 0:(i=arguments,n=R.restartOnRequestAfter||0,"boolean"==typeof n&&(n=0),setTimeout(function(){var e,n,s,a,l,u;if(e="socket"===o?r.readyState<2:0<(a=r.readyState)&&4>a){for(c.restart(),l=c.sources,u=[],n=0,s=l.length;s>n;n++){if(M=l[n],M instanceof t){M.watch.apply(M,i);break}u.push(void 0)}return u}},n))}),t=function(){function t(){var t=this;this.elements=[],C().on("request",function(){return t.watch.apply(t,arguments)})}return t.prototype.watch=function(t){var e,n,i,r;return i=t.type,e=t.request,r=t.url,N(r)?void 0:(n="socket"===i?new d(e):new f(e),this.elements.push(n))},t}(),f=function(){function t(t){var e,n,i,r,o,s,a=this;if(this.progress=0,null!=window.ProgressEvent)for(n=null,t.addEventListener("progress",function(t){return a.progress=t.lengthComputable?100*t.loaded/t.total:a.progress+(100-a.progress)/2},!1),s=["load","abort","timeout","error"],i=0,r=s.length;r>i;i++)e=s[i],t.addEventListener(e,function(){return a.progress=100},!1);else o=t.onreadystatechange,t.onreadystatechange=function(){var e;return 0===(e=t.readyState)||4===e?a.progress=100:3===t.readyState&&(a.progress=50),"function"==typeof o?o.apply(null,arguments):void 0}}return t}(),d=function(){function t(t){var e,n,i,r,o=this;for(this.progress=0,r=["error","open"],n=0,i=r.length;i>n;n++)e=r[n],t.addEventListener(e,function(){return o.progress=100},!1)}return t}(),i=function(){function t(t){var e,n,i,o;for(null==t&&(t={}),this.elements=[],null==t.selectors&&(t.selectors=[]),o=t.selectors,n=0,i=o.length;i>n;n++)e=o[n],this.elements.push(new r(e))}return t}(),r=function(){function t(t){this.selector=t,this.progress=0,this.check()}return t.prototype.check=function(){var t=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return t.check()},R.elements.checkInterval)},t.prototype.done=function(){return this.progress=100},t}(),n=function(){function t(){var t,e,n=this;this.progress=null!=(e=this.states[document.readyState])?e:100,t=document.onreadystatechange,document.onreadystatechange=function(){return null!=n.states[document.readyState]&&(n.progress=n.states[document.readyState]),"function"==typeof t?t.apply(null,arguments):void 0}}return t.prototype.states={loading:0,interactive:50,complete:100},t}(),o=function(){function t(){var t,e,n,i,r,o=this;this.progress=0,t=0,r=[],i=0,n=D(),e=setInterval(function(){var s;return s=D()-n-50,n=D(),r.push(s),r.length>R.eventLag.sampleCount&&r.shift(),t=m(r),++i>=R.eventLag.minSamples&&t<R.eventLag.lagThreshold?(o.progress=100,clearInterval(e)):o.progress=100*(3/(t+3))},50)}return t}(),p=function(){function t(t){this.source=t,this.last=this.sinceLastUpdate=0,this.rate=R.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=$(this.source,"progress"))}return t.prototype.tick=function(t,e){var n;return null==e&&(e=$(this.source,"progress")),e>=100&&(this.done=!0),e===this.last?this.sinceLastUpdate+=t:(this.sinceLastUpdate&&(this.rate=(e-this.last)/this.sinceLastUpdate),this.catchup=(e-this.progress)/R.catchupTime,this.sinceLastUpdate=0,this.last=e),e>this.progress&&(this.progress+=this.catchup*t),n=1-Math.pow(this.progress/100,R.easeFactor),this.progress+=n*this.rate*t,this.progress=Math.min(this.lastProgress+R.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},t}(),I=null,P=null,v=null,O=null,g=null,y=null,c.running=!1,E=function(){return R.restartOnPushState?c.restart():void 0},null!=window.history.pushState&&(F=window.history.pushState,window.history.pushState=function(){return E(),F.apply(window.history,arguments)}),null!=window.history.replaceState&&(Q=window.history.replaceState,window.history.replaceState=function(){return E(),Q.apply(window.history,arguments)}),h={ajax:t,elements:i,document:n,eventLag:o},(k=function(){var t,n,i,r,o,s,a,l;for(c.sources=I=[],s=["ajax","elements","document","eventLag"],n=0,r=s.length;r>n;n++)t=s[n],R[t]!==!1&&I.push(new h[t](R[t]));for(l=null!=(a=R.extraSources)?a:[],i=0,o=l.length;o>i;i++)M=l[i],I.push(new M(R));return c.bar=v=new e,P=[],O=new p})(),c.stop=function(){return c.trigger("stop"),c.running=!1,v.destroy(),y=!0,null!=g&&("function"==typeof w&&w(g),g=null),k()},c.restart=function(){return c.trigger("restart"),c.stop(),c.start()},c.go=function(){var t;return c.running=!0,v.render(),t=D(),y=!1,g=j(function(e,n){var i,r,o,s,a,l,u,h,d,f,g,m,w,b,x,_;for(h=100-v.progress,r=g=0,o=!0,l=m=0,b=I.length;b>m;l=++m)for(M=I[l],f=null!=P[l]?P[l]:P[l]=[],a=null!=(_=M.elements)?_:[M],u=w=0,x=a.length;x>w;u=++w)s=a[u],d=null!=f[u]?f[u]:f[u]=new p(s),o&=d.done,d.done||(r++,g+=d.tick(e));return i=g/r,v.update(O.tick(e,i)),v.done()||o||y?(v.update(100),c.trigger("done"),setTimeout(function(){return v.finish(),c.running=!1,c.trigger("hide")},Math.max(R.ghostTime,Math.max(R.minTime-(D()-t),0)))):n()})},c.start=function(t){x(R,t),c.running=!0;try{v.render()}catch(e){l=e}return document.querySelector(".pace")?(c.trigger("start"),c.go()):setTimeout(c.start,50)},"function"==typeof define&&define.amd?define(["pace"],function(){return c}):"object"==typeof exports?module.exports=c:R.startOnPageLoad&&c.start()}.call(this),/*!
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
function(t,e){var n,i=t.jQuery||t.Cowboy||(t.Cowboy={});i.throttle=n=function(t,n,r,o){function s(){function i(){l=+new Date,r.apply(c,h)}function s(){a=e}var c=this,u=+new Date-l,h=arguments;o&&!a&&i(),a&&clearTimeout(a),o===e&&u>t?i():n!==!0&&(a=setTimeout(o?s:i,o===e?t-u:t))}var a,l=0;return"boolean"!=typeof n&&(o=r,r=n,n=e),i.guid&&(s.guid=r.guid=r.guid||i.guid++),s},i.debounce=function(t,i,r){return r===e?n(t,i,!1):n(t,r,i!==!1)}}(this),function(t,e,n,i){function r(e,n){this.settings=null,this.options=t.extend({},r.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,n){this._handlers[n]=t.proxy(this[n],this)},this)),t.each(r.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(r.Workers,t.proxy(function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,o[i]=r?e*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,r=Math.max(2*i.items,4),o=2*Math.ceil(n.length/2),s=i.loop&&n.length?i.rewind?r:Math.max(r,o):0,a="",l="";for(s/=2;s--;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,o=[];++n<e;)i=o[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,o.push(i+r*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,s=this.coordinates(this.current())+o,a=s+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+o*r,(this.op(t,"<=",s)&&this.op(t,">",a)||this.op(e,"<",s)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],r.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,n,r;e=this.$element.find("img"),n=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,r=this.$element.children(n).width(),e.length&&r<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,r=null;n?(t.each(n,function(t){t<=e&&t>i&&(i=Number(t))}),r=t.extend({},this.options,n[i]),"function"==typeof r.stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=i,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},r.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy(function(t){return this[t]},this._invalidated),r={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(t){switch(t=t||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},r.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),this.settings.responsive!==!1&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,o.x=Math.max(Math.min(o.x,e+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},r.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,o=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(e,n){var i=-1,r=30,o=this.width(),s=this.coordinates();return this.settings.freeDrag||t.each(s,t.proxy(function(t,a){return"left"===n&&e>a-r&&e<a+r?i=t:"right"===n&&e>a-o-r&&e<a-o+r?i=t+1:this.op(e,"<",a)&&this.op(e,">",s[t+1]||a-o)&&(i="left"===n?t+1:t),i===-1},this)),this.settings.loop||(this.op(e,">",s[this.minimum()])?i=e=this.minimum():this.op(e,"<",s[this.maximum()])&&(i=e=this.maximum())),i},r.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},r.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},r.prototype.current=function(t){if(t===i)return this._current;if(0===this._items.length)return i;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==i&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},r.prototype.reset=function(t){t=this.normalize(t),t!==i&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},r.prototype.normalize=function(t,e){var n=this._items.length,r=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=i:(t<0||t>=n+r)&&(t=((t-r/2)%n+n)%n+r/2),t},r.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},r.prototype.maximum=function(t){var e,n,i,r=this.settings,o=this._coordinates.length;if(r.loop)o=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){for(e=this._items.length,n=this._items[--e].width(),i=this.$element.width();e--&&(n+=this._items[e].width()+this.settings.margin,!(n>i)););o=e+1}else o=r.center?this._items.length-1:this._items.length-r.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},r.prototype.minimum=function(t){return t?0:this._clones.length/2},r.prototype.items=function(t){return t===i?this._items.slice():(t=this.normalize(t,!0),this._items[t])},r.prototype.mergers=function(t){return t===i?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},r.prototype.clones=function(e){var n=this._clones.length/2,r=n+this._items.length,o=function(t){return t%2===0?r+t/2:n-(t+1)/2};return e===i?t.map(this._clones,function(t,e){return o(e)}):t.map(this._clones,function(t,n){return t===e?o(n):null})},r.prototype.speed=function(t){return t!==i&&(this._speed=t),this._speed},r.prototype.coordinates=function(e){var n,r=1,o=e-1;return e===i?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,o=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[o]||0))/2*r):n=this._coordinates[o]||0,n=Math.ceil(n))},r.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},r.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),o=(r>0)-(r<0),s=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>s/2&&(r+=o*-1*s),t=n+r,i=((t-a)%s+s)%s+a,i!==t&&i-r<=l&&i-r>0&&(n=i-r,t=i,this.reset(n))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},r.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},r.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},r.prototype.onTransitionEnd=function(t){return(t===i||(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},r.prototype.viewport=function(){var i;if(this.options.responsiveBaseElement!==e)i=t(this.options.responsiveBaseElement).width();else if(e.innerWidth)i=e.innerWidth;else{if(!n.documentElement||!n.documentElement.clientWidth)throw"Can not detect viewport width.";i=n.documentElement.clientWidth}return i},r.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(e,n){var r=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:n}),e=this.prepare(e),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[n-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(e),this._items.splice(n,0,e),this._mergers.splice(n,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:e,position:n})},r.prototype.remove=function(t){t=this.normalize(t,!0),t!==i&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},r.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy(function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},r.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),this.settings.responsive!==!1&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},r.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},r.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},r.prototype.trigger=function(e,n,i,o,s){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:r.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},r.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===i&&(this._states.current[e]=0),this._states.current[e]++},this))},r.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},r.prototype.register=function(e){if(e.type===r.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&t.namespace.indexOf("owl")!==-1?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===r.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(n,i){return t.inArray(n,this._states.tags[e.name])===i},this)))},r.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},r.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},r.prototype.pointer=function(t){var n={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(n.x=t.pageX,n.y=t.pageY):(n.x=t.clientX,n.y=t.clientY),n},r.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},r.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=t(this),o=i.data("owl.carousel");o||(o=new r(this,"object"==typeof e&&e),i.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,n){o.register({type:r.Type.Event,name:n}),o.$element.on(n+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),o[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,n)})},t.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,n;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var n=this._core.settings,r=n.center&&Math.ceil(n.items/2)||n.items,o=n.center&&r*-1||0,s=(e.property&&e.property.value!==i?e.property.value:this._core.current())+o,a=this._core.clones().length,l=t.proxy(function(t,e){this.load(e)},this);o++<r;)this.load(a/2+this._core.relative(s)),a&&t.each(this._core.clones(this._core.relative(s)),l),s++},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1},r.prototype.load=function(n){var i=this._core.$stage.children().eq(n),r=i&&i.find(".owl-lazy");!r||t.inArray(i.get(0),this._loaded)>-1||(r.each(t.proxy(function(n,i){var r,o=t(i),s=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:s},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:s},"lazy")},this)).attr("src",s):(r=new Image,r.onload=t.proxy(function(){o.css({"background-image":"url("+s+")",opacity:"1"}),this._core.trigger("loaded",{element:o,url:s},"lazy")},this),r.src=s)},this)),this._loaded.push(i.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.$stage.children().toArray().slice(e,n),r=[],o=0;t.each(i,function(e,n){r.push(t(n).height())}),o=Math.max.apply(null,r),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var n=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,s=t.attr("href");if(!s)throw new Error("Missing video URL.");if(i=s.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),i[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[s]={type:n,id:i,width:r,height:o},e.attr("data-video",s),this.thumbnail(t,this._videos[s])},r.prototype.thumbnail=function(e,n){var i,r,o,s=n.width&&n.height?'style="width:'+n.width+"px;height:"+n.height+'px;"':"",a=e.find("img"),l="src",c="",u=this._core.settings,h=function(t){r='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(i),e.after(r)};return e.wrap('<div class="owl-video-wrapper"'+s+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length?(h(a.attr(l)),a.remove(),!1):void("youtube"===n.type?(o="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",h(o)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,h(o)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,h(o)}}))},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var n,i=t(e.target),r=i.closest("."+this._core.settings.itemClass),o=this._videos[r.attr("data-video")],s=o.width||"100%",a=o.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),r=this._core.items(this._core.relative(r.index())),this._core.reset(r.index()),"youtube"===o.type?n='<iframe width="'+s+'" height="'+a+'" src="//www.youtube.com/embed/'+o.id+"?autoplay=1&v="+o.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===o.type?n='<iframe src="//player.vimeo.com/video/'+o.id+'?autoplay=1" width="'+s+'" height="'+a+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===o.type&&(n='<iframe frameborder="0"height="'+a+'"width="'+s+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+o.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+n+"</div>").insertAfter(r.find(".owl-video")),this._playing=r.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this.core=e,this.core.options=t.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=i,this.next=i,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,n=t.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,s=this.core.settings.animateOut;this.core.current()!==this.previous&&(s&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(t.support.animation.end,n).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(s)),o&&r.one(t.support.animation.end,n).addClass("animated owl-animated-in").addClass(o));
}},r.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},r.prototype._getNextTimeout=function(i,r){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||n.hidden||this._core.next(r||this._core.settings.autoplaySpeed)},this),i||this._core.settings.autoplayTimeout)},r.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},r.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},r.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,n=this._core.settings;this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[t("<div>").addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,n,i;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},r.prototype.update=function(){var t,e,n,i=this._core.clones().length/2,r=i+this._core.items().length,o=this._core.maximum(!0),s=this._core.settings,a=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=i,e=0,n=0;t<r;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(o,t-i),end:t-i+a-1}),Math.min(o,t-i)===o)break;e=0,++n}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,r=this._core.relative(this._core.current()),o=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!o&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,n){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var n,i,r=this._core.settings;return"page"==r.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=r.slideBy:n-=r.slideBy),n},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,n,i){var r;!i&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}},this),"changed.owl.carousel":t.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===i?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var n=e.location.hash.substring(1),r=this._core.$stage.children(),o=this._hashes[n]&&r.index(this._hashes[n]);o!==i&&o!==this._core.current()&&this._core.to(this._core.relative(o),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var n,i;t(e).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){function r(e,n){var r=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(o+" ")+o).split(" "),function(t,e){if(s[e]!==i)return r=!n||e,!1}),r}function o(t){return r(t,!0)}var s=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!r("transform")},csstransforms3d:function(){return!!r("perspective")},csstransitions:function(){return!!r("transition")},cssanimations:function(){return!!r("animation")}};c.csstransitions()&&(t.support.transition=new String(o("transition")),t.support.transition.end=l.transition.end[t.support.transition]),c.cssanimations()&&(t.support.animation=new String(o("animation")),t.support.animation.end=l.animation.end[t.support.animation]),c.csstransforms()&&(t.support.transform=new String(o("transform")),t.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document),/*! owl.carousel2.thumbs - v0.1.7 | (c) 2016 @gijsroge | MIT license | https://github.com/gijsroge/OwlCarousel2-Thumbs */
!function(t,e,n,i){"use strict";var r=function(e){this.owl=e,this._thumbcontent=[],this._identifier=0,this.owl_currentitem=this.owl.options.startPosition,this.$element=this.owl.$element,this._handlers={"prepared.owl.carousel":t.proxy(function(e){if(!e.namespace||!this.owl.options.thumbs||this.owl.options.thumbImage||this.owl.options.thumbsPrerendered||this.owl.options.thumbImage){if(e.namespace&&this.owl.options.thumbs&&this.owl.options.thumbImage){var n=t(e.content).find("img");this._thumbcontent.push(n)}}else t(e.content).find("[data-thumb]").attr("data-thumb")!==i&&this._thumbcontent.push(t(e.content).find("[data-thumb]").attr("data-thumb"))},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this.owl.options.thumbs&&(this.render(),this.listen(),this._identifier=this.owl.$element.data("slider-id"),this.setActive())},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this.owl.options.thumbs&&(this._identifier=this.owl.$element.data("slider-id"),this.setActive())},this)},this.owl.options=t.extend(r.Defaults,this.owl.options),this.owl.$element.on(this._handlers)};r.Defaults={thumbs:!0,thumbImage:!1,thumbContainerClass:"owl-thumbs",thumbItemClass:"owl-thumb-item",moveThumbsInside:!1},r.prototype.listen=function(){var e=this.owl.options;e.thumbsPrerendered&&(this._thumbcontent._thumbcontainer=t("."+e.thumbContainerClass)),t(this._thumbcontent._thumbcontainer).on("click",this._thumbcontent._thumbcontainer.children(),t.proxy(function(n){this._identifier=t(n.target).closest("."+e.thumbContainerClass).data("slider-id");var i=t(n.target).parent().is(this._thumbcontent._thumbcontainer)?t(n.target).index():t(n.target).closest("."+e.thumbItemClass).index();e.thumbsPrerendered?t("[data-slider-id="+this._identifier+"]").trigger("to.owl.carousel",[i,e.dotsSpeed,!0]):this.owl.to(i,e.dotsSpeed),n.preventDefault()},this))},r.prototype.render=function(){var e=this.owl.options;e.thumbsPrerendered?(this._thumbcontent._thumbcontainer=t("."+e.thumbContainerClass),e.moveThumbsInside&&this._thumbcontent._thumbcontainer.appendTo(this.$element)):this._thumbcontent._thumbcontainer=t("<div>").addClass(e.thumbContainerClass).appendTo(this.$element);var n;if(e.thumbImage)for(n=0;n<this._thumbcontent.length;++n)this._thumbcontent._thumbcontainer.append("<button class="+e.thumbItemClass+'><img src="'+this._thumbcontent[n].attr("src")+'" alt="'+this._thumbcontent[n].attr("alt")+'" /></button>');else for(n=0;n<this._thumbcontent.length;++n)this._thumbcontent._thumbcontainer.append("<button class="+e.thumbItemClass+">"+this._thumbcontent[n]+"</button>")},r.prototype.setActive=function(){this.owl_currentitem=this.owl._current-this.owl._clones.length/2,this.owl_currentitem===this.owl._items.length&&(this.owl_currentitem=0);var e=this.owl.options,n=e.thumbsPrerendered?t("."+e.thumbContainerClass+'[data-slider-id="'+this._identifier+'"]'):this._thumbcontent._thumbcontainer;n.children().filter(".active").removeClass("active"),n.children().eq(this.owl_currentitem).addClass("active")},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this.owl.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Thumbs=r}(window.Zepto||window.jQuery,window,document),function t(e,n,i){function r(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};e[s][0].call(u.exports,function(t){var n=e[s][1][t];return r(n?n:t)},u,u.exports,t,e,n,i)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(t,e,n){"use strict";function i(t){t.fn.perfectScrollbar=function(t){return this.each(function(){if("object"==typeof t||"undefined"==typeof t){var e=t;o.get(this)||r.initialize(this,e)}else{var n=t;"update"===n?r.update(this):"destroy"===n&&r.destroy(this)}})}}var r=t("../main"),o=t("../plugin/instances");if("function"==typeof define&&define.amd)define(["jquery"],i);else{var s=window.jQuery?window.jQuery:window.$;"undefined"!=typeof s&&i(s)}e.exports=i},{"../main":7,"../plugin/instances":18}],2:[function(t,e,n){"use strict";function i(t,e){var n=t.className.split(" ");n.indexOf(e)<0&&n.push(e),t.className=n.join(" ")}function r(t,e){var n=t.className.split(" "),i=n.indexOf(e);i>=0&&n.splice(i,1),t.className=n.join(" ")}n.add=function(t,e){t.classList?t.classList.add(e):i(t,e)},n.remove=function(t,e){t.classList?t.classList.remove(e):r(t,e)},n.list=function(t){return t.classList?Array.prototype.slice.apply(t.classList):t.className.split(" ")}},{}],3:[function(t,e,n){"use strict";function i(t,e){return window.getComputedStyle(t)[e]}function r(t,e,n){return"number"==typeof n&&(n=n.toString()+"px"),t.style[e]=n,t}function o(t,e){for(var n in e){var i=e[n];"number"==typeof i&&(i=i.toString()+"px"),t.style[n]=i}return t}var s={};s.e=function(t,e){var n=document.createElement(t);return n.className=e,n},s.appendTo=function(t,e){return e.appendChild(t),t},s.css=function(t,e,n){return"object"==typeof e?o(t,e):"undefined"==typeof n?i(t,e):r(t,e,n)},s.matches=function(t,e){return"undefined"!=typeof t.matches?t.matches(e):"undefined"!=typeof t.matchesSelector?t.matchesSelector(e):"undefined"!=typeof t.webkitMatchesSelector?t.webkitMatchesSelector(e):"undefined"!=typeof t.mozMatchesSelector?t.mozMatchesSelector(e):"undefined"!=typeof t.msMatchesSelector?t.msMatchesSelector(e):void 0},s.remove=function(t){"undefined"!=typeof t.remove?t.remove():t.parentNode&&t.parentNode.removeChild(t)},s.queryChildren=function(t,e){return Array.prototype.filter.call(t.childNodes,function(t){return s.matches(t,e)})},e.exports=s},{}],4:[function(t,e,n){"use strict";var i=function(t){this.element=t,this.events={}};i.prototype.bind=function(t,e){"undefined"==typeof this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this.element.addEventListener(t,e,!1)},i.prototype.unbind=function(t,e){var n="undefined"!=typeof e;this.events[t]=this.events[t].filter(function(i){return!(!n||i===e)||(this.element.removeEventListener(t,i,!1),!1)},this)},i.prototype.unbindAll=function(){for(var t in this.events)this.unbind(t)};var r=function(){this.eventElements=[]};r.prototype.eventElement=function(t){var e=this.eventElements.filter(function(e){return e.element===t})[0];return"undefined"==typeof e&&(e=new i(t),this.eventElements.push(e)),e},r.prototype.bind=function(t,e,n){this.eventElement(t).bind(e,n)},r.prototype.unbind=function(t,e,n){this.eventElement(t).unbind(e,n)},r.prototype.unbindAll=function(){for(var t=0;t<this.eventElements.length;t++)this.eventElements[t].unbindAll()},r.prototype.once=function(t,e,n){var i=this.eventElement(t),r=function(t){i.unbind(e,r),n(t)};i.bind(e,r)},e.exports=r},{}],5:[function(t,e,n){"use strict";e.exports=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return function(){return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()}}()},{}],6:[function(t,e,n){"use strict";var i=t("./class"),r=t("./dom"),o=n.toInt=function(t){return parseInt(t,10)||0},s=n.clone=function(t){if(t){if(t.constructor===Array)return t.map(s);if("object"==typeof t){var e={};for(var n in t)e[n]=s(t[n]);return e}return t}return null};n.extend=function(t,e){var n=s(t);for(var i in e)n[i]=s(e[i]);return n},n.isEditable=function(t){return r.matches(t,"input,[contenteditable]")||r.matches(t,"select,[contenteditable]")||r.matches(t,"textarea,[contenteditable]")||r.matches(t,"button,[contenteditable]")},n.removePsClasses=function(t){for(var e=i.list(t),n=0;n<e.length;n++){var r=e[n];0===r.indexOf("ps-")&&i.remove(t,r)}},n.outerWidth=function(t){return o(r.css(t,"width"))+o(r.css(t,"paddingLeft"))+o(r.css(t,"paddingRight"))+o(r.css(t,"borderLeftWidth"))+o(r.css(t,"borderRightWidth"))},n.startScrolling=function(t,e){i.add(t,"ps-in-scrolling"),"undefined"!=typeof e?i.add(t,"ps-"+e):(i.add(t,"ps-x"),i.add(t,"ps-y"))},n.stopScrolling=function(t,e){i.remove(t,"ps-in-scrolling"),"undefined"!=typeof e?i.remove(t,"ps-"+e):(i.remove(t,"ps-x"),i.remove(t,"ps-y"))},n.env={isWebKit:"WebkitAppearance"in document.documentElement.style,supportsTouch:"ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,supportsIePointer:null!==window.navigator.msMaxTouchPoints}},{"./class":2,"./dom":3}],7:[function(t,e,n){"use strict";var i=t("./plugin/destroy"),r=t("./plugin/initialize"),o=t("./plugin/update");e.exports={initialize:r,update:o,destroy:i}},{"./plugin/destroy":9,"./plugin/initialize":17,"./plugin/update":21}],8:[function(t,e,n){"use strict";e.exports={handlers:["click-rail","drag-scrollbar","keyboard","wheel","touch"],maxScrollbarLength:null,minScrollbarLength:null,scrollXMarginOffset:0,scrollYMarginOffset:0,suppressScrollX:!1,suppressScrollY:!1,swipePropagation:!0,useBothWheelAxes:!1,wheelPropagation:!1,wheelSpeed:1,theme:"default"}},{}],9:[function(t,e,n){"use strict";var i=t("../lib/helper"),r=t("../lib/dom"),o=t("./instances");e.exports=function(t){var e=o.get(t);e&&(e.event.unbindAll(),r.remove(e.scrollbarX),r.remove(e.scrollbarY),r.remove(e.scrollbarXRail),r.remove(e.scrollbarYRail),i.removePsClasses(t),o.remove(t))}},{"../lib/dom":3,"../lib/helper":6,"./instances":18}],10:[function(t,e,n){"use strict";function i(t,e){function n(t){return t.getBoundingClientRect()}var i=function(t){t.stopPropagation()};e.event.bind(e.scrollbarY,"click",i),e.event.bind(e.scrollbarYRail,"click",function(i){var r=i.pageY-window.pageYOffset-n(e.scrollbarYRail).top,a=r>e.scrollbarYTop?1:-1;s(t,"top",t.scrollTop+a*e.containerHeight),o(t),i.stopPropagation()}),e.event.bind(e.scrollbarX,"click",i),e.event.bind(e.scrollbarXRail,"click",function(i){var r=i.pageX-window.pageXOffset-n(e.scrollbarXRail).left,a=r>e.scrollbarXLeft?1:-1;s(t,"left",t.scrollLeft+a*e.containerWidth),o(t),i.stopPropagation()})}var r=t("../instances"),o=t("../update-geometry"),s=t("../update-scroll");e.exports=function(t){var e=r.get(t);i(t,e)}},{"../instances":18,"../update-geometry":19,"../update-scroll":20}],11:[function(t,e,n){"use strict";function i(t,e){function n(n){var r=i+n*e.railXRatio,s=Math.max(0,e.scrollbarXRail.getBoundingClientRect().left)+e.railXRatio*(e.railXWidth-e.scrollbarXWidth);r<0?e.scrollbarXLeft=0:r>s?e.scrollbarXLeft=s:e.scrollbarXLeft=r;var a=o.toInt(e.scrollbarXLeft*(e.contentWidth-e.containerWidth)/(e.containerWidth-e.railXRatio*e.scrollbarXWidth))-e.negativeScrollAdjustment;c(t,"left",a)}var i=null,r=null,a=function(e){n(e.pageX-r),l(t),e.stopPropagation(),e.preventDefault()},u=function(){o.stopScrolling(t,"x"),e.event.unbind(e.ownerDocument,"mousemove",a)};e.event.bind(e.scrollbarX,"mousedown",function(n){r=n.pageX,i=o.toInt(s.css(e.scrollbarX,"left"))*e.railXRatio,o.startScrolling(t,"x"),e.event.bind(e.ownerDocument,"mousemove",a),e.event.once(e.ownerDocument,"mouseup",u),n.stopPropagation(),n.preventDefault()})}function r(t,e){function n(n){var r=i+n*e.railYRatio,s=Math.max(0,e.scrollbarYRail.getBoundingClientRect().top)+e.railYRatio*(e.railYHeight-e.scrollbarYHeight);r<0?e.scrollbarYTop=0:r>s?e.scrollbarYTop=s:e.scrollbarYTop=r;var a=o.toInt(e.scrollbarYTop*(e.contentHeight-e.containerHeight)/(e.containerHeight-e.railYRatio*e.scrollbarYHeight));c(t,"top",a)}var i=null,r=null,a=function(e){n(e.pageY-r),l(t),e.stopPropagation(),e.preventDefault()},u=function(){o.stopScrolling(t,"y"),e.event.unbind(e.ownerDocument,"mousemove",a)};e.event.bind(e.scrollbarY,"mousedown",function(n){r=n.pageY,i=o.toInt(s.css(e.scrollbarY,"top"))*e.railYRatio,o.startScrolling(t,"y"),e.event.bind(e.ownerDocument,"mousemove",a),e.event.once(e.ownerDocument,"mouseup",u),n.stopPropagation(),n.preventDefault()})}var o=t("../../lib/helper"),s=t("../../lib/dom"),a=t("../instances"),l=t("../update-geometry"),c=t("../update-scroll");e.exports=function(t){var e=a.get(t);i(t,e),r(t,e)}},{"../../lib/dom":3,"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],12:[function(t,e,n){"use strict";function i(t,e){function n(n,i){var r=t.scrollTop;if(0===n){if(!e.scrollbarYActive)return!1;if(0===r&&i>0||r>=e.contentHeight-e.containerHeight&&i<0)return!e.settings.wheelPropagation}var o=t.scrollLeft;if(0===i){if(!e.scrollbarXActive)return!1;if(0===o&&n<0||o>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}var i=!1;e.event.bind(t,"mouseenter",function(){i=!0}),e.event.bind(t,"mouseleave",function(){i=!1});var s=!1;e.event.bind(e.ownerDocument,"keydown",function(c){if(!(c.isDefaultPrevented&&c.isDefaultPrevented()||c.defaultPrevented)){var u=o.matches(e.scrollbarX,":focus")||o.matches(e.scrollbarY,":focus");if(i||u){var h=document.activeElement?document.activeElement:e.ownerDocument.activeElement;if(h){if("IFRAME"===h.tagName)h=h.contentDocument.activeElement;else for(;h.shadowRoot;)h=h.shadowRoot.activeElement;if(r.isEditable(h))return}var p=0,d=0;switch(c.which){case 37:p=c.metaKey?-e.contentWidth:c.altKey?-e.containerWidth:-30;break;case 38:d=c.metaKey?e.contentHeight:c.altKey?e.containerHeight:30;break;case 39:p=c.metaKey?e.contentWidth:c.altKey?e.containerWidth:30;break;case 40:d=c.metaKey?-e.contentHeight:c.altKey?-e.containerHeight:-30;break;case 33:d=90;break;case 32:d=c.shiftKey?90:-90;break;case 34:d=-90;break;case 35:d=c.ctrlKey?-e.contentHeight:-e.containerHeight;break;case 36:d=c.ctrlKey?t.scrollTop:e.containerHeight;break;default:return}l(t,"top",t.scrollTop-d),l(t,"left",t.scrollLeft+p),a(t),s=n(p,d),s&&c.preventDefault()}}})}var r=t("../../lib/helper"),o=t("../../lib/dom"),s=t("../instances"),a=t("../update-geometry"),l=t("../update-scroll");e.exports=function(t){var e=s.get(t);i(t,e)}},{"../../lib/dom":3,"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],13:[function(t,e,n){"use strict";function i(t,e){function n(n,i){var r=t.scrollTop;if(0===n){if(!e.scrollbarYActive)return!1;if(0===r&&i>0||r>=e.contentHeight-e.containerHeight&&i<0)return!e.settings.wheelPropagation}var o=t.scrollLeft;if(0===i){if(!e.scrollbarXActive)return!1;if(0===o&&n<0||o>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}function i(t){var e=t.deltaX,n=-1*t.deltaY;return"undefined"!=typeof e&&"undefined"!=typeof n||(e=-1*t.wheelDeltaX/6,n=t.wheelDeltaY/6),t.deltaMode&&1===t.deltaMode&&(e*=10,n*=10),e!==e&&n!==n&&(e=0,n=t.wheelDelta),t.shiftKey?[-n,-e]:[e,n]}function r(e,n){var i=t.querySelector("textarea:hover, select[multiple]:hover, .ps-child:hover");if(i){if(!window.getComputedStyle(i).overflow.match(/(scroll|auto)/))return!1;var r=i.scrollHeight-i.clientHeight;if(r>0&&!(0===i.scrollTop&&n>0||i.scrollTop===r&&n<0))return!0;var o=i.scrollLeft-i.clientWidth;if(o>0&&!(0===i.scrollLeft&&e<0||i.scrollLeft===o&&e>0))return!0}return!1}function a(a){var c=i(a),u=c[0],h=c[1];r(u,h)||(l=!1,e.settings.useBothWheelAxes?e.scrollbarYActive&&!e.scrollbarXActive?(h?s(t,"top",t.scrollTop-h*e.settings.wheelSpeed):s(t,"top",t.scrollTop+u*e.settings.wheelSpeed),l=!0):e.scrollbarXActive&&!e.scrollbarYActive&&(u?s(t,"left",t.scrollLeft+u*e.settings.wheelSpeed):s(t,"left",t.scrollLeft-h*e.settings.wheelSpeed),l=!0):(s(t,"top",t.scrollTop-h*e.settings.wheelSpeed),s(t,"left",t.scrollLeft+u*e.settings.wheelSpeed)),o(t),l=l||n(u,h),l&&(a.stopPropagation(),a.preventDefault()))}var l=!1;"undefined"!=typeof window.onwheel?e.event.bind(t,"wheel",a):"undefined"!=typeof window.onmousewheel&&e.event.bind(t,"mousewheel",a)}var r=t("../instances"),o=t("../update-geometry"),s=t("../update-scroll");e.exports=function(t){var e=r.get(t);i(t,e)}},{"../instances":18,"../update-geometry":19,"../update-scroll":20}],14:[function(t,e,n){"use strict";function i(t,e){e.event.bind(t,"scroll",function(){o(t)})}var r=t("../instances"),o=t("../update-geometry");e.exports=function(t){var e=r.get(t);i(t,e)}},{"../instances":18,"../update-geometry":19}],15:[function(t,e,n){"use strict";function i(t,e){function n(){var t=window.getSelection?window.getSelection():document.getSelection?document.getSelection():"";return 0===t.toString().length?null:t.getRangeAt(0).commonAncestorContainer}function i(){c||(c=setInterval(function(){return o.get(t)?(a(t,"top",t.scrollTop+u.top),a(t,"left",t.scrollLeft+u.left),void s(t)):void clearInterval(c)},50))}function l(){c&&(clearInterval(c),c=null),r.stopScrolling(t)}var c=null,u={top:0,left:0},h=!1;e.event.bind(e.ownerDocument,"selectionchange",function(){t.contains(n())?h=!0:(h=!1,l())}),e.event.bind(window,"mouseup",function(){h&&(h=!1,l())}),e.event.bind(window,"keyup",function(){h&&(h=!1,l())}),e.event.bind(window,"mousemove",function(e){if(h){var n={x:e.pageX,y:e.pageY},o={left:t.offsetLeft,right:t.offsetLeft+t.offsetWidth,top:t.offsetTop,bottom:t.offsetTop+t.offsetHeight};n.x<o.left+3?(u.left=-5,r.startScrolling(t,"x")):n.x>o.right-3?(u.left=5,r.startScrolling(t,"x")):u.left=0,n.y<o.top+3?(o.top+3-n.y<5?u.top=-5:u.top=-20,r.startScrolling(t,"y")):n.y>o.bottom-3?(n.y-o.bottom+3<5?u.top=5:u.top=20,r.startScrolling(t,"y")):u.top=0,0===u.top&&0===u.left?l():i()}})}var r=t("../../lib/helper"),o=t("../instances"),s=t("../update-geometry"),a=t("../update-scroll");e.exports=function(t){var e=o.get(t);i(t,e)}},{"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],16:[function(t,e,n){"use strict";function i(t,e,n,i){function r(n,i){var r=t.scrollTop,o=t.scrollLeft,s=Math.abs(n),a=Math.abs(i);if(a>s){if(i<0&&r===e.contentHeight-e.containerHeight||i>0&&0===r)return!e.settings.swipePropagation}else if(s>a&&(n<0&&o===e.contentWidth-e.containerWidth||n>0&&0===o))return!e.settings.swipePropagation;return!0}function l(e,n){a(t,"top",t.scrollTop-n),a(t,"left",t.scrollLeft-e),s(t)}function c(){b=!0}function u(){b=!1}function h(t){return t.targetTouches?t.targetTouches[0]:t}function p(t){return!(!t.targetTouches||1!==t.targetTouches.length)||!(!t.pointerType||"mouse"===t.pointerType||t.pointerType===t.MSPOINTER_TYPE_MOUSE)}function d(t){if(p(t)){x=!0;var e=h(t);m.pageX=e.pageX,m.pageY=e.pageY,v=(new Date).getTime(),null!==w&&clearInterval(w),t.stopPropagation()}}function f(t){if(!x&&e.settings.swipePropagation&&d(t),!b&&x&&p(t)){var n=h(t),i={pageX:n.pageX,pageY:n.pageY},o=i.pageX-m.pageX,s=i.pageY-m.pageY;l(o,s),m=i;var a=(new Date).getTime(),c=a-v;c>0&&(y.x=o/c,y.y=s/c,v=a),r(o,s)&&(t.stopPropagation(),t.preventDefault())}}function g(){!b&&x&&(x=!1,clearInterval(w),w=setInterval(function(){return o.get(t)&&(y.x||y.y)?Math.abs(y.x)<.01&&Math.abs(y.y)<.01?void clearInterval(w):(l(30*y.x,30*y.y),y.x*=.8,void(y.y*=.8)):void clearInterval(w)},10))}var m={},v=0,y={},w=null,b=!1,x=!1;n&&(e.event.bind(window,"touchstart",c),e.event.bind(window,"touchend",u),e.event.bind(t,"touchstart",d),e.event.bind(t,"touchmove",f),e.event.bind(t,"touchend",g)),i&&(window.PointerEvent?(e.event.bind(window,"pointerdown",c),e.event.bind(window,"pointerup",u),e.event.bind(t,"pointerdown",d),e.event.bind(t,"pointermove",f),e.event.bind(t,"pointerup",g)):window.MSPointerEvent&&(e.event.bind(window,"MSPointerDown",c),e.event.bind(window,"MSPointerUp",u),e.event.bind(t,"MSPointerDown",d),e.event.bind(t,"MSPointerMove",f),e.event.bind(t,"MSPointerUp",g)))}var r=t("../../lib/helper"),o=t("../instances"),s=t("../update-geometry"),a=t("../update-scroll");e.exports=function(t){if(r.env.supportsTouch||r.env.supportsIePointer){var e=o.get(t);i(t,e,r.env.supportsTouch,r.env.supportsIePointer)}}},{"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],17:[function(t,e,n){"use strict";var i=t("../lib/helper"),r=t("../lib/class"),o=t("./instances"),s=t("./update-geometry"),a={"click-rail":t("./handler/click-rail"),"drag-scrollbar":t("./handler/drag-scrollbar"),keyboard:t("./handler/keyboard"),wheel:t("./handler/mouse-wheel"),touch:t("./handler/touch"),selection:t("./handler/selection")},l=t("./handler/native-scroll");e.exports=function(t,e){e="object"==typeof e?e:{},r.add(t,"ps-container");var n=o.add(t);n.settings=i.extend(n.settings,e),r.add(t,"ps-theme-"+n.settings.theme),n.settings.handlers.forEach(function(e){a[e](t)}),l(t),s(t)}},{"../lib/class":2,"../lib/helper":6,"./handler/click-rail":10,"./handler/drag-scrollbar":11,"./handler/keyboard":12,"./handler/mouse-wheel":13,"./handler/native-scroll":14,"./handler/selection":15,"./handler/touch":16,"./instances":18,"./update-geometry":19}],18:[function(t,e,n){"use strict";function i(t){function e(){l.add(t,"ps-focus")}function n(){l.remove(t,"ps-focus")}var i=this;i.settings=a.clone(c),i.containerWidth=null,i.containerHeight=null,i.contentWidth=null,i.contentHeight=null,i.isRtl="rtl"===u.css(t,"direction"),i.isNegativeScroll=function(){var e=t.scrollLeft,n=null;return t.scrollLeft=-1,n=t.scrollLeft<0,t.scrollLeft=e,n}(),i.negativeScrollAdjustment=i.isNegativeScroll?t.scrollWidth-t.clientWidth:0,i.event=new h,i.ownerDocument=t.ownerDocument||document,i.scrollbarXRail=u.appendTo(u.e("div","ps-scrollbar-x-rail"),t),i.scrollbarX=u.appendTo(u.e("div","ps-scrollbar-x"),i.scrollbarXRail),i.scrollbarX.setAttribute("tabindex",0),i.event.bind(i.scrollbarX,"focus",e),i.event.bind(i.scrollbarX,"blur",n),i.scrollbarXActive=null,i.scrollbarXWidth=null,i.scrollbarXLeft=null,i.scrollbarXBottom=a.toInt(u.css(i.scrollbarXRail,"bottom")),i.isScrollbarXUsingBottom=i.scrollbarXBottom===i.scrollbarXBottom,i.scrollbarXTop=i.isScrollbarXUsingBottom?null:a.toInt(u.css(i.scrollbarXRail,"top")),i.railBorderXWidth=a.toInt(u.css(i.scrollbarXRail,"borderLeftWidth"))+a.toInt(u.css(i.scrollbarXRail,"borderRightWidth")),u.css(i.scrollbarXRail,"display","block"),i.railXMarginWidth=a.toInt(u.css(i.scrollbarXRail,"marginLeft"))+a.toInt(u.css(i.scrollbarXRail,"marginRight")),u.css(i.scrollbarXRail,"display",""),i.railXWidth=null,i.railXRatio=null,i.scrollbarYRail=u.appendTo(u.e("div","ps-scrollbar-y-rail"),t),i.scrollbarY=u.appendTo(u.e("div","ps-scrollbar-y"),i.scrollbarYRail),i.scrollbarY.setAttribute("tabindex",0),i.event.bind(i.scrollbarY,"focus",e),i.event.bind(i.scrollbarY,"blur",n),i.scrollbarYActive=null,i.scrollbarYHeight=null,i.scrollbarYTop=null,i.scrollbarYRight=a.toInt(u.css(i.scrollbarYRail,"right")),i.isScrollbarYUsingRight=i.scrollbarYRight===i.scrollbarYRight,i.scrollbarYLeft=i.isScrollbarYUsingRight?null:a.toInt(u.css(i.scrollbarYRail,"left")),i.scrollbarYOuterWidth=i.isRtl?a.outerWidth(i.scrollbarY):null,i.railBorderYWidth=a.toInt(u.css(i.scrollbarYRail,"borderTopWidth"))+a.toInt(u.css(i.scrollbarYRail,"borderBottomWidth")),u.css(i.scrollbarYRail,"display","block"),i.railYMarginHeight=a.toInt(u.css(i.scrollbarYRail,"marginTop"))+a.toInt(u.css(i.scrollbarYRail,"marginBottom")),u.css(i.scrollbarYRail,"display",""),i.railYHeight=null,i.railYRatio=null}function r(t){return t.getAttribute("data-ps-id")}function o(t,e){t.setAttribute("data-ps-id",e)}function s(t){t.removeAttribute("data-ps-id")}var a=t("../lib/helper"),l=t("../lib/class"),c=t("./default-setting"),u=t("../lib/dom"),h=t("../lib/event-manager"),p=t("../lib/guid"),d={};n.add=function(t){var e=p();return o(t,e),d[e]=new i(t),d[e]},n.remove=function(t){delete d[r(t)],s(t)},n.get=function(t){return d[r(t)]}},{"../lib/class":2,"../lib/dom":3,"../lib/event-manager":4,"../lib/guid":5,"../lib/helper":6,"./default-setting":8}],19:[function(t,e,n){"use strict";function i(t,e){return t.settings.minScrollbarLength&&(e=Math.max(e,t.settings.minScrollbarLength)),t.settings.maxScrollbarLength&&(e=Math.min(e,t.settings.maxScrollbarLength)),e}function r(t,e){var n={width:e.railXWidth};e.isRtl?n.left=e.negativeScrollAdjustment+t.scrollLeft+e.containerWidth-e.contentWidth:n.left=t.scrollLeft,e.isScrollbarXUsingBottom?n.bottom=e.scrollbarXBottom-t.scrollTop:n.top=e.scrollbarXTop+t.scrollTop,a.css(e.scrollbarXRail,n);var i={top:t.scrollTop,height:e.railYHeight};e.isScrollbarYUsingRight?e.isRtl?i.right=e.contentWidth-(e.negativeScrollAdjustment+t.scrollLeft)-e.scrollbarYRight-e.scrollbarYOuterWidth:i.right=e.scrollbarYRight-t.scrollLeft:e.isRtl?i.left=e.negativeScrollAdjustment+t.scrollLeft+2*e.containerWidth-e.contentWidth-e.scrollbarYLeft-e.scrollbarYOuterWidth:i.left=e.scrollbarYLeft+t.scrollLeft,a.css(e.scrollbarYRail,i),a.css(e.scrollbarX,{left:e.scrollbarXLeft,width:e.scrollbarXWidth-e.railBorderXWidth}),a.css(e.scrollbarY,{top:e.scrollbarYTop,height:e.scrollbarYHeight-e.railBorderYWidth})}var o=t("../lib/helper"),s=t("../lib/class"),a=t("../lib/dom"),l=t("./instances"),c=t("./update-scroll");e.exports=function(t){var e=l.get(t);e.containerWidth=t.clientWidth,e.containerHeight=t.clientHeight,e.contentWidth=t.scrollWidth,e.contentHeight=t.scrollHeight;var n;t.contains(e.scrollbarXRail)||(n=a.queryChildren(t,".ps-scrollbar-x-rail"),n.length>0&&n.forEach(function(t){a.remove(t)}),a.appendTo(e.scrollbarXRail,t)),t.contains(e.scrollbarYRail)||(n=a.queryChildren(t,".ps-scrollbar-y-rail"),n.length>0&&n.forEach(function(t){a.remove(t)}),a.appendTo(e.scrollbarYRail,t)),!e.settings.suppressScrollX&&e.containerWidth+e.settings.scrollXMarginOffset<e.contentWidth?(e.scrollbarXActive=!0,e.railXWidth=e.containerWidth-e.railXMarginWidth,e.railXRatio=e.containerWidth/e.railXWidth,e.scrollbarXWidth=i(e,o.toInt(e.railXWidth*e.containerWidth/e.contentWidth)),e.scrollbarXLeft=o.toInt((e.negativeScrollAdjustment+t.scrollLeft)*(e.railXWidth-e.scrollbarXWidth)/(e.contentWidth-e.containerWidth))):e.scrollbarXActive=!1,!e.settings.suppressScrollY&&e.containerHeight+e.settings.scrollYMarginOffset<e.contentHeight?(e.scrollbarYActive=!0,e.railYHeight=e.containerHeight-e.railYMarginHeight,e.railYRatio=e.containerHeight/e.railYHeight,e.scrollbarYHeight=i(e,o.toInt(e.railYHeight*e.containerHeight/e.contentHeight)),e.scrollbarYTop=o.toInt(t.scrollTop*(e.railYHeight-e.scrollbarYHeight)/(e.contentHeight-e.containerHeight))):e.scrollbarYActive=!1,e.scrollbarXLeft>=e.railXWidth-e.scrollbarXWidth&&(e.scrollbarXLeft=e.railXWidth-e.scrollbarXWidth),e.scrollbarYTop>=e.railYHeight-e.scrollbarYHeight&&(e.scrollbarYTop=e.railYHeight-e.scrollbarYHeight),r(t,e),e.scrollbarXActive?s.add(t,"ps-active-x"):(s.remove(t,"ps-active-x"),e.scrollbarXWidth=0,e.scrollbarXLeft=0,c(t,"left",0)),e.scrollbarYActive?s.add(t,"ps-active-y"):(s.remove(t,"ps-active-y"),e.scrollbarYHeight=0,e.scrollbarYTop=0,c(t,"top",0))}},{"../lib/class":2,"../lib/dom":3,"../lib/helper":6,"./instances":18,"./update-scroll":20}],20:[function(t,e,n){"use strict";var i,r,o=t("./instances"),s=function(t){var e=document.createEvent("Event");return e.initEvent(t,!0,!0),e};e.exports=function(t,e,n){if("undefined"==typeof t)throw"You must provide an element to the update-scroll function";if("undefined"==typeof e)throw"You must provide an axis to the update-scroll function";if("undefined"==typeof n)throw"You must provide a value to the update-scroll function";"top"===e&&n<=0&&(t.scrollTop=n=0,t.dispatchEvent(s("ps-y-reach-start"))),"left"===e&&n<=0&&(t.scrollLeft=n=0,t.dispatchEvent(s("ps-x-reach-start")));var a=o.get(t);"top"===e&&n>=a.contentHeight-a.containerHeight&&(n=a.contentHeight-a.containerHeight,n-t.scrollTop<=1?n=t.scrollTop:t.scrollTop=n,t.dispatchEvent(s("ps-y-reach-end"))),"left"===e&&n>=a.contentWidth-a.containerWidth&&(n=a.contentWidth-a.containerWidth,n-t.scrollLeft<=1?n=t.scrollLeft:t.scrollLeft=n,t.dispatchEvent(s("ps-x-reach-end"))),i||(i=t.scrollTop),r||(r=t.scrollLeft),"top"===e&&n<i&&t.dispatchEvent(s("ps-scroll-up")),"top"===e&&n>i&&t.dispatchEvent(s("ps-scroll-down")),"left"===e&&n<r&&t.dispatchEvent(s("ps-scroll-left")),"left"===e&&n>r&&t.dispatchEvent(s("ps-scroll-right")),"top"===e&&(t.scrollTop=i=n,t.dispatchEvent(s("ps-scroll-y"))),"left"===e&&(t.scrollLeft=r=n,t.dispatchEvent(s("ps-scroll-x")))}},{"./instances":18}],21:[function(t,e,n){"use strict";var i=t("../lib/helper"),r=t("../lib/dom"),o=t("./instances"),s=t("./update-geometry"),a=t("./update-scroll");e.exports=function(t){var e=o.get(t);e&&(e.negativeScrollAdjustment=e.isNegativeScroll?t.scrollWidth-t.clientWidth:0,r.css(e.scrollbarXRail,"display","block"),r.css(e.scrollbarYRail,"display","block"),e.railXMarginWidth=i.toInt(r.css(e.scrollbarXRail,"marginLeft"))+i.toInt(r.css(e.scrollbarXRail,"marginRight")),e.railYMarginHeight=i.toInt(r.css(e.scrollbarYRail,"marginTop"))+i.toInt(r.css(e.scrollbarYRail,"marginBottom")),r.css(e.scrollbarXRail,"display","none"),r.css(e.scrollbarYRail,"display","none"),s(t),a(t,"top",t.scrollTop),a(t,"left",t.scrollLeft),r.css(e.scrollbarXRail,"display",""),r.css(e.scrollbarYRail,"display",""))}},{"../lib/dom":3,"../lib/helper":6,"./instances":18,"./update-geometry":19,"./update-scroll":20}]},{},[1]),/*!
CSS Browser Selector v0.4.0 (Nov 02, 2010)
Rafael Lima (http://rafael.adm.br)
http://rafael.adm.br/css_browser_selector
License: http://creativecommons.org/licenses/by/2.5/
Contributors: http://rafael.adm.br/css_browser_selector#contributors

v0.5.0 2011-08-24
andrew relkin

modified, now detects:
any version of Firefox
more versions of Windows (Win8, Win7, Vista, XP, Win2k)
more versions of IE under unique conditions
more detailed support for Opera
if "no-js" in HTML class: removes and replaces with "js" (<html class="no-js">)

identifies
  browsers: Firefox; IE; Opera; Safari; Chrome, Konqueror, Iron
  browser versions: (most importantly: ie6, ie7, ie8, ie9)
  rendering engines: Webkit; Mozilla; Gecko
  platforms/OSes: Mac; Win: Win7, Vista, XP, Win2k; FreeBSD; Linux/x11
  devices: Ipod; Ipad; Iphone; WebTV; Blackberry; Android; J2me; mobile(generic)
  enabled technology: JS

v0.6.3 2014-03-06
@silasrm <silasrm@gmail.com>
    - Added support to IE11
        @see http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
        @see http://msdn.microsoft.com/en-us/library/ie/bg182625(v=vs.85).aspx
*/
showLog=!0,css_browser_selector(navigator.userAgent),function(t){var e={$win:t(window),$body:t("body"),spW:640,tabW:768,breakPointPC:1024,scrollTop:0,scrollLeft:0,init:function(){var e=this;e.$win=t(window),e.$body=t("body"),e.winW=e.$win.width(),e.winH=e.$win.height(),e.bodyH=e.$body.height(),e.isMini=e.$win.width()<=e.spW,e.isTab=e.spW<=e.$win.width()&&e.$win.width()<=e.tabW,e.isPC=e.tabW<=e.$win.width()&&e.$win.width()<=e.breakPointPC;var n=function(){e.winW=e.$win.width(),e.winH=e.$win.height(),e.isMini=e.$win.width()<=e.spW,e.isTab=e.spW<=e.$win.width()&&e.$win.width()<=e.tabW,e.isPC=e.tabW<=e.$win.width()&&e.$win.width()<=e.breakPointPC};n(),e.$win.on("resize",function(){n()});var i=function(){e.scrollTop=e.$win.scrollTop(),e.scrollLeft=e.$win.scrollLeft()};i(),e.$win.on("scroll",function(){i()})},transitionEnd:"oTransitionEnd mozTransitionEnd webkitTransitionEnd transitionend",animationEnd:"webkitAnimationEnd oanimationend msAnimationEnd animationend"};e.init();var n=function(){var n=t("#wrap"),i=function(){setTimeout(function(){n.addClass("is-active").find(".js-late").addClass("is-active")},100)},r=function(){paceOptions={ajax:!1,document:!1,eventLag:!1,restartOnPushState:!0},Pace.on("done",function(){e.$body.addClass("ready")})};r();var o=function(e,n){e.length&&!function(){var i=n,r=e,o=!1;r.on("click",function(e){e.preventDefault(),o?(t("body").off(".noScroll"),i.removeClass("is-open"),o=!1):(t("body").on("touchmove.noScroll",function(t){t.preventDefault()}),i.addClass("is-open"),o=!0)})}()},s=function(){var e=t("#js-tab"),n=e.find(".js-tab-trigger"),i=e.find(".js-tab-item"),r=void 0;n.on("click",function(e){e.preventDefault(),n.removeClass("is-active"),r=t(this).addClass("is-active").attr("href"),i.removeClass("is-active").filter(r).addClass("is-active")})},a=function(){var e=function(){t(".js-slider-fade").owlCarousel({animateOut:"fadeOut",items:1,margin:0,stagePadding:0,smartSpeed:450,loop:!0,autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!0})};e();var n=function(){t(".js-slider-basic").owlCarousel({loop:!0,margin:10,nav:!0,responsive:{0:{items:1},600:{items:3},1e3:{items:5}}})};n();var i=function(){t(".js-slider-center").owlCarousel({center:!0,items:2,loop:!0,margin:10,smartSpeed:1e3,autoplay:!0,autoplayTimeout:1500,autoplayHoverPause:!0})};i();var r=function(){var e=t(".js-slider-my-nav");e.owlCarousel({loop:!0,margin:10,smartSpeed:600,autoplay:!0,autoplayTimeout:1500,autoplayHoverPause:!0}),e.next().find(".js-slider-nav-prev").on("click",function(t){t.preventDefault(),e.trigger("prev.owl.carousel")}),e.next().find(".js-slider-nav-next").on("click",function(t){t.preventDefault(),e.trigger("next.owl.carousel")})};r();var o=function(){t(".js-slider-thumb").owlCarousel({animateOut:"fadeOut",smartSpeed:600,loop:!0,autoplay:!0,autoplayTimeout:1500,autoplayHoverPause:!0,items:1,dots:!1,thumbs:!0,thumbImage:!0,thumbContainerClass:"owl-thumbs",thumbItemClass:"owl-thumb-item"})};o()},l=function(){t(".js-scroll-box").perfectScrollbar({wheelSpeed:.8,minScrollbarLength:100,wheelPropagation:!0})},c=function(n){var i=void 0,r=void 0,o=void 0,s=void 0,a=void 0,l=function(){i=n.children(),i.each(function(){r=t(this).offset().top,o=e.$win.scrollTop(),s=e.$winH,a=30,o>r-s+a?t(this).addClass("is-current"):t(this).removeClass("is-current")})};l(),e.$win.on("scroll",t.throttle(1e3/15,function(){l()}))};t(".js-fadein").each(function(){var n=t(this),i=n.offset().top;e.$win.on("scroll",function(){t(this).scrollTop()+e.$winH>i+200&&n.addClass("is-show")})}),e.$win.on("load",function(){s(),l(),c(t(".js-fadein-wrap")),a(),i(),o(t(".js-navi-trigger"),t(".js-navi"))})};n()}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
